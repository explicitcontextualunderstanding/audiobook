# Dependency Analysis Dockerfile
# Used to extract dependency information during the build process
ARG BASE_IMAGE=dustynv/pytorch:2.6-r36.4.0-cu128-24.04

# ============================================================================
# ANALYSIS STAGE: Extract dependency information during build
# ============================================================================
FROM ${BASE_IMAGE} AS analysis

# Set environment variables for build optimization
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    NO_TORCH_COMPILE=1 \
    DEBIAN_FRONTEND=noninteractive \
    CONDA_DIR=/opt/conda \
    PYTHONHASHSEED=0 \
    PIP_DEFAULT_TIMEOUT=100 \
    CARGO_HOME=/root/.cargo \
    PATH="/root/.cargo/bin:/opt/conda/bin:$PATH"

# Install essential tools for dependency analysis
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-pip git curl wget && \
    pip3 install --no-cache-dir pip-tools pipdeptree && \
    rm -rf /var/lib/apt/lists/*

# Install Rust toolchain for packages requiring Cargo
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
    . "$HOME/.cargo/env" && \
    rustup default stable && \
    rustup update && \
    cargo --version

# Create directory for dependency artifacts
RUN mkdir -p /dependency_analysis

# Create default requirements.in with recommended values
RUN echo "# Core PyTorch - using Jetson-optimized versions" > /dependency_analysis/requirements.in && \
    echo "torch>=2.7.0" >> /dependency_analysis/requirements.in && \
    echo "torchvision>=0.22.0" >> /dependency_analysis/requirements.in && \
    echo "torchaudio>=2.7.0" >> /dependency_analysis/requirements.in && \
    echo "" >> /dependency_analysis/requirements.in && \
    echo "# Libraries with specific version requirements" >> /dependency_analysis/requirements.in && \
    echo "vector_quantize_pytorch>=1.22.15" >> /dependency_analysis/requirements.in && \
    echo "torchao>=0.11.0" >> /dependency_analysis/requirements.in && \
    echo "einops>=0.8.0" >> /dependency_analysis/requirements.in && \
    echo "triton>=3.3.0" >> /dependency_analysis/requirements.in && \
    echo "torchtune>=0.3.0" >> /dependency_analysis/requirements.in && \
    echo "moshi>=0.2.2" >> /dependency_analysis/requirements.in && \
    echo "silentcipher>=1.0.1" >> /dependency_analysis/requirements.in && \
    echo "librosa>=0.10.1" >> /dependency_analysis/requirements.in && \
    echo "" >> /dependency_analysis/requirements.in && \
    echo "# Transformers & NLP" >> /dependency_analysis/requirements.in && \
    echo "tokenizers>=0.13.3" >> /dependency_analysis/requirements.in && \
    echo "transformers>=4.31.0" >> /dependency_analysis/requirements.in && \
    echo "huggingface_hub>=0.16.4" >> /dependency_analysis/requirements.in && \
    echo "accelerate>=0.25.0" >> /dependency_analysis/requirements.in && \
    echo "nltk>=3.8.1" >> /dependency_analysis/requirements.in && \
    echo "" >> /dependency_analysis/requirements.in && \
    echo "# Audio processing" >> /dependency_analysis/requirements.in && \
    echo "soundfile>=0.12.1" >> /dependency_analysis/requirements.in && \
    echo "pydub>=0.25.1" >> /dependency_analysis/requirements.in && \
    echo "sounddevice>=0.5.0" >> /dependency_analysis/requirements.in && \
    echo "" >> /dependency_analysis/requirements.in && \
    echo "# Text extraction" >> /dependency_analysis/requirements.in && \
    echo "ebooklib>=0.18.0" >> /dependency_analysis/requirements.in && \
    echo "beautifulsoup4>=4.12.2" >> /dependency_analysis/requirements.in && \
    echo "PyPDF2>=3.0.1" >> /dependency_analysis/requirements.in && \
    echo "pdfminer.six>=20221105" >> /dependency_analysis/requirements.in && \
    echo "" >> /dependency_analysis/requirements.in && \
    echo "# Other utilities" >> /dependency_analysis/requirements.in && \
    echo "sphn>=0.1.4" >> /dependency_analysis/requirements.in && \
    echo "rotary_embedding_torch>=0.2.5" >> /dependency_analysis/requirements.in && \
    echo "datasets>=2.16.1" >> /dependency_analysis/requirements.in && \
    echo "tqdm>=4.66.1" >> /dependency_analysis/requirements.in && \
    echo "psutil>=5.9.6" >> /dependency_analysis/requirements.in

WORKDIR /dependency_analysis

# Analyze package availability on Jetson PyPI index
RUN for pkg in torch torchvision torchaudio vector_quantize_pytorch torchao einops triton torchtune moshi; do \
        echo "Checking $pkg on Jetson index..." && \
        pip index versions $pkg --index-url=https://pypi.jetson-ai-lab.dev/simple > ${pkg}_jetson_versions.txt 2>/dev/null || \
        echo "$pkg: Not found on Jetson index" > ${pkg}_jetson_versions.txt; \
    done && \
    cat *_jetson_versions.txt > jetson_versions.txt

# Try to generate a lock file
RUN pip-compile --resolver=backtracking requirements.in -o requirements.lock.txt 2> pip_compile_error.txt || echo "Failed to generate lock file" > lock_file_error.txt

# Check wheel availability for ARM64
RUN for pkg in torch torchvision torchaudio vector_quantize_pytorch torchao einops triton torchtune moshi; do \
        echo "Checking $pkg for ARM64 wheels..." && \
        (pip download --no-deps --only-binary=:all: --python-version=3.10 --platform=linux_aarch64 --index-url=https://pypi.jetson-ai-lab.dev/simple $pkg && \
         echo "$pkg: ARM64 wheel available on Jetson index" >> wheel_availability.txt) || \
        (pip download --no-deps --only-binary=:all: --python-version=3.10 --platform=linux_aarch64 $pkg && \
         echo "$pkg: ARM64 wheel available on PyPI" >> wheel_availability.txt) || \
        echo "$pkg: No ARM64 wheel available, source build required" >> wheel_availability.txt; \
        find . -name "*.whl" -delete; \
    done

# Install Miniconda
RUN curl -fsSL https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh -o miniconda.sh && \
    bash miniconda.sh -b -p /opt/conda && \
    rm miniconda.sh

# Create conda environment for analysis
RUN /opt/conda/bin/conda create -y -n analysis python=3.10 pip && \
    /opt/conda/bin/conda clean -ya

# Script to test installing packages individually
RUN echo '#!/bin/bash' > test_packages.sh && \
    echo 'source /opt/conda/bin/activate analysis' >> test_packages.sh && \
    echo 'echo "Package,Status,Error" > package_results.csv' >> test_packages.sh && \
    for pkg in torch torchvision torchaudio vector_quantize_pytorch torchao einops triton moshi torchtune; do \
        echo "echo \"Testing package: $pkg\"" >> test_packages.sh; \
        echo "pip install --no-deps $pkg > /dev/null 2> ${pkg}_error.txt" >> test_packages.sh; \
        echo "if [ \$? -eq 0 ]; then" >> test_packages.sh; \
        echo "  echo \"$pkg,Success,\" >> package_results.csv" >> test_packages.sh; \
        echo "else" >> test_packages.sh; \
        echo "  error=\$(cat ${pkg}_error.txt | tr '\n' ' ' | tr '\"' \"'\")" >> test_packages.sh; \
        echo "  echo \"$pkg,Failed,\\\"\$error\\\"\" >> package_results.csv" >> test_packages.sh; \
        echo "fi" >> test_packages.sh; \
    done && \
    chmod +x test_packages.sh

# Run the package test script
RUN ./test_packages.sh || echo "Package testing completed with errors"

# Generate analysis report
RUN echo "# Dependency Analysis Report" > analysis_report.md && \
    echo "" >> analysis_report.md && \
    echo "## Individual Package Installation Results" >> analysis_report.md && \
    echo "" >> analysis_report.md && \
    echo "| Package | Status | Error |" >> analysis_report.md && \
    echo "|---------|--------|-------|" >> analysis_report.md && \
    if [ -f "package_results.csv" ]; then \
        tail -n +2 package_results.csv | sed 's/,/|/g' | sed 's/^/|/g' | sed 's/$/|/g' >> analysis_report.md || echo "| Error processing results | - | - |" >> analysis_report.md; \
    else \
        echo "| No results available | - | - |" >> analysis_report.md; \
    fi && \
    echo "" >> analysis_report.md && \
    echo "## ARM64 Wheel Availability" >> analysis_report.md && \
    echo "" >> analysis_report.md && \
    if [ -f "wheel_availability.txt" ]; then \
        cat wheel_availability.txt | sed 's/^/- /g' >> analysis_report.md || echo "Error including wheel availability" >> analysis_report.md; \
    else \
        echo "No wheel availability information available." >> analysis_report.md; \
    fi && \
    echo "" >> analysis_report.md && \
    echo "## Recommended Solution" >> analysis_report.md && \
    echo "" >> analysis_report.md && \
    echo "Based on the analysis, we recommend:" >> analysis_report.md && \
    echo "" >> analysis_report.md && \
    echo "1. Use Jetson-optimized wheels wherever available" >> analysis_report.md && \
    echo "2. Update packages with known compatibility issues:" >> analysis_report.md && \
    echo "   - vector_quantize_pytorch to >=1.22.15" >> analysis_report.md && \
    echo "   - einops to >=0.8.0" >> analysis_report.md && \
    echo "   - torch/torchvision/torchaudio to the latest Jetson versions" >> analysis_report.md && \
    echo "" >> analysis_report.md && \
    echo "3. Install packages in smaller groups to isolate failures" >> analysis_report.md

# Create extraction script
RUN echo '#!/bin/bash' > /extract_analysis.sh && \
    echo 'mkdir -p /output' >> /extract_analysis.sh && \
    echo 'cp -r /dependency_analysis/* /output/' >> /extract_analysis.sh && \
    echo 'echo "Dependency analysis results extracted to /output"' >> /extract_analysis.sh && \
    chmod +x /extract_analysis.sh

# Make the analysis results accessible
VOLUME /output

# Command to run when starting the container
CMD ["/extract_analysis.sh"]

commit 37e76405c2bac217e666cc5ade94b32e141f5a9e
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 19 14:35:43 2025 -0700

    Use the correct .tar asset (not .tar.gz) when downloading the Triton server:

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index f5320bd..bf71ac6 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -40,11 +40,11 @@ ENTRYPOINT ["/entrypoint.sh"]
 CMD ["/opt/conda/bin/conda", "run", "-n", "tts", "--no-capture-output", "bash"]
 
 # Install Triton Inference Server for JetPack 6.2/Orin
-RUN wget https://github.com/triton-inference-server/server/releases/download/v2.55.0/tritonserver2.55.0-igpu.tar.gz \
-      -O tritonserver2.55.0-igpu.tar.gz && \
+RUN wget https://github.com/triton-inference-server/server/releases/download/v2.55.0/tritonserver2.55.0-igpu.tar \
+      -O tritonserver2.55.0-igpu.tar && \
     mkdir -p /opt/tritonserver && \
-    tar -xzf tritonserver2.55.0-igpu.tar.gz -C /opt/tritonserver --strip-components=1 && \
-    rm tritonserver2.55.0-igpu.tar.gz
+    tar -xvf tritonserver2.55.0-igpu.tar -C /opt/tritonserver --strip-components=1 && \
+    rm tritonserver2.55.0-igpu.tar
 
 ENV PATH="/opt/tritonserver/bin:${PATH}"
 

commit 5fc460a522659480bbcbda0486e1a51dbe36c56c
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 19 13:35:19 2025 -0700

    Correct Triton server download URL and extraction flags

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index daabab3..f5320bd 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -40,10 +40,12 @@ ENTRYPOINT ["/entrypoint.sh"]
 CMD ["/opt/conda/bin/conda", "run", "-n", "tts", "--no-capture-output", "bash"]
 
 # Install Triton Inference Server for JetPack 6.2/Orin
-RUN wget https://github.com/triton-inference-server/server/releases/download/v2.55.0/tritonserver2.55.0-igpu.tar \
-    && mkdir -p /opt/tritonserver \
-    && tar -xvf tritonserver2.55.0-igpu.tar -C /opt/tritonserver --strip-components=1 \
-    && rm tritonserver2.55.0-igpu.tar
+RUN wget https://github.com/triton-inference-server/server/releases/download/v2.55.0/tritonserver2.55.0-igpu.tar.gz \
+      -O tritonserver2.55.0-igpu.tar.gz && \
+    mkdir -p /opt/tritonserver && \
+    tar -xzf tritonserver2.55.0-igpu.tar.gz -C /opt/tritonserver --strip-components=1 && \
+    rm tritonserver2.55.0-igpu.tar.gz
+
 ENV PATH="/opt/tritonserver/bin:${PATH}"
 
 # Shallow‑clone Sesame CSM repo, copy only the two utils, then drop the git data

commit 3f2b1a0d9e57e68b5796da65b4e3845f74ca411b
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 19 12:52:47 2025 -0700

    shallow‑clone block to install triton via pip in the tts env:

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index d6e09be..daabab3 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -51,4 +51,7 @@ RUN rm -rf /opt/utils/csm && \
     git clone --depth 1 https://github.com/SesameAILabs/csm.git /opt/utils/csm && \
     cp /opt/utils/csm/generator.py /opt/utils/ && \
     cp /opt/utils/csm/models.py    /opt/utils/ && \
-    rm -rf /opt/utils/csm/.git
\ No newline at end of file
+    rm -rf /opt/utils/csm/.git
+
+# Install Python Triton package so torchao kernels are available
+RUN /opt/conda/bin/conda run -n tts pip install triton
\ No newline at end of file

commit cd51a84009aaddddf6683498550491d3fcaf645e
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 19 12:49:56 2025 -0700

    switch to a shallow clone of the entire CSM repo and then copy only the two utility files:

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index a6b45fe..d6e09be 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -46,14 +46,9 @@ RUN wget https://github.com/triton-inference-server/server/releases/download/v2.
     && rm tritonserver2.55.0-igpu.tar
 ENV PATH="/opt/tritonserver/bin:${PATH}"
 
-# For maximum reproducibility, generator.py and models.py from the CSM repo are vendored in docker/sesame-tts/utils/.
-# If you need to update these files, do so manually and commit them to version control.
-# Remove the two COPY lines and replace with a fetch step
-- COPY docker/sesame-tts/utils/generator.py /opt/utils/generator.py
-- COPY docker/sesame-tts/utils/models.py    /opt/utils/models.py
-
-# Fetch the latest CSM utility files directly from upstream
-RUN wget https://raw.githubusercontent.com/SesameAILabs/csm/main/generator.py \
-      -O /opt/utils/generator.py && \
-    wget https://raw.githubusercontent.com/SesameAILabs/csm/main/models.py \
-      -O /opt/utils/models.py
\ No newline at end of file
+# Shallow‑clone Sesame CSM repo, copy only the two utils, then drop the git data
+RUN rm -rf /opt/utils/csm && \
+    git clone --depth 1 https://github.com/SesameAILabs/csm.git /opt/utils/csm && \
+    cp /opt/utils/csm/generator.py /opt/utils/ && \
+    cp /opt/utils/csm/models.py    /opt/utils/ && \
+    rm -rf /opt/utils/csm/.git
\ No newline at end of file

commit fd9d902784517b052c61de71c3eeecd0521ad541
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 19 10:09:50 2025 -0700

    ensures the required files are pulled into the image at build time, so you no longer need local copies under docker/sesame-tts/utils/.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 9e87c4a..a6b45fe 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -48,5 +48,12 @@ ENV PATH="/opt/tritonserver/bin:${PATH}"
 
 # For maximum reproducibility, generator.py and models.py from the CSM repo are vendored in docker/sesame-tts/utils/.
 # If you need to update these files, do so manually and commit them to version control.
-COPY docker/sesame-tts/utils/generator.py /opt/utils/generator.py
-COPY docker/sesame-tts/utils/models.py /opt/utils/models.py
\ No newline at end of file
+# Remove the two COPY lines and replace with a fetch step
+- COPY docker/sesame-tts/utils/generator.py /opt/utils/generator.py
+- COPY docker/sesame-tts/utils/models.py    /opt/utils/models.py
+
+# Fetch the latest CSM utility files directly from upstream
+RUN wget https://raw.githubusercontent.com/SesameAILabs/csm/main/generator.py \
+      -O /opt/utils/generator.py && \
+    wget https://raw.githubusercontent.com/SesameAILabs/csm/main/models.py \
+      -O /opt/utils/models.py
\ No newline at end of file

commit 48adc30087e8d8850dae6ff4385f6fd5d4affac7
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 19 09:46:15 2025 -0700

    vendor (copy) the required CSM files (generator.py and models.py) directly into your repository and ensure the Docker build always uses these local, version-controlled files.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index c6c3856..9e87c4a 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -44,4 +44,9 @@ RUN wget https://github.com/triton-inference-server/server/releases/download/v2.
     && mkdir -p /opt/tritonserver \
     && tar -xvf tritonserver2.55.0-igpu.tar -C /opt/tritonserver --strip-components=1 \
     && rm tritonserver2.55.0-igpu.tar
-ENV PATH="/opt/tritonserver/bin:${PATH}"
\ No newline at end of file
+ENV PATH="/opt/tritonserver/bin:${PATH}"
+
+# For maximum reproducibility, generator.py and models.py from the CSM repo are vendored in docker/sesame-tts/utils/.
+# If you need to update these files, do so manually and commit them to version control.
+COPY docker/sesame-tts/utils/generator.py /opt/utils/generator.py
+COPY docker/sesame-tts/utils/models.py /opt/utils/models.py
\ No newline at end of file

commit 00ae9a6ee003436948253d88d5424ca4ad123d08
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 19 09:09:01 2025 -0700

    Triton Inference Server 2.55.0 will now be installed in your container at /opt/tritonserver, and its binaries will be available in the PATH

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index f336777..c6c3856 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -37,4 +37,11 @@ HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
 ENTRYPOINT ["/entrypoint.sh"]
 
 # Default command - uses conda environment with full path
-CMD ["/opt/conda/bin/conda", "run", "-n", "tts", "--no-capture-output", "bash"]
\ No newline at end of file
+CMD ["/opt/conda/bin/conda", "run", "-n", "tts", "--no-capture-output", "bash"]
+
+# Install Triton Inference Server for JetPack 6.2/Orin
+RUN wget https://github.com/triton-inference-server/server/releases/download/v2.55.0/tritonserver2.55.0-igpu.tar \
+    && mkdir -p /opt/tritonserver \
+    && tar -xvf tritonserver2.55.0-igpu.tar -C /opt/tritonserver --strip-components=1 \
+    && rm tritonserver2.55.0-igpu.tar
+ENV PATH="/opt/tritonserver/bin:${PATH}"
\ No newline at end of file

commit 7d076bade356ac7524f1c48561683b707601f1e9
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Fri Apr 18 22:59:57 2025 -0700

    copy utils

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index c259b9c..f336777 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -15,6 +15,7 @@ WORKDIR /opt/build
 COPY docker/sesame-tts/requirements.txt ./
 COPY docker/sesame-tts/build.sh ./
 COPY docker/sesame-tts/utils/ ./utils/
+COPY docker/sesame-tts/utils/ /opt/utils/
 COPY docker/sesame-tts/entrypoint.sh ./
 
 # Make scripts executable and run build

commit 88227983b4d6d93a4ea66162b47716faeaf2d865
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Wed Apr 16 22:07:16 2025 -0700

    special wrapper script that will help us diagnose and potentially work around the CUDA detection issue

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 745de09..c259b9c 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -25,7 +25,8 @@ WORKDIR /workspace
 
 # Copy entrypoint script to final location
 COPY docker/sesame-tts/entrypoint.sh /entrypoint.sh
-RUN chmod +x /entrypoint.sh
+COPY docker/sesame-tts/utils/force_cuda_test.sh /usr/local/bin/force_cuda_test.sh
+RUN chmod +x /entrypoint.sh /usr/local/bin/force_cuda_test.sh
 
 # Health check - runs inside the container to verify it's functioning properly
 HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \

commit 7531e8c0bff13ea5cc6fdb46d8d41e51d932f272
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Wed Apr 16 20:46:03 2025 -0700

    fix entrypoint

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 55d3fba..745de09 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -23,9 +23,16 @@ RUN chmod +x ./build.sh ./entrypoint.sh && /bin/bash -c "set -e && ./build.sh"
 # Add final workdir, health check and default command
 WORKDIR /workspace
 
+# Copy entrypoint script to final location
+COPY docker/sesame-tts/entrypoint.sh /entrypoint.sh
+RUN chmod +x /entrypoint.sh
+
 # Health check - runs inside the container to verify it's functioning properly
 HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
     CMD /opt/conda/bin/conda run -n tts python -c "import torch, moshi, torchao; print('Health check passed.')" || exit 1
 
+# Set the entrypoint script
+ENTRYPOINT ["/entrypoint.sh"]
+
 # Default command - uses conda environment with full path
 CMD ["/opt/conda/bin/conda", "run", "-n", "tts", "--no-capture-output", "bash"]
\ No newline at end of file

commit a0b303ce5ecd8eb3729a26a45781e2adb7670762
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Wed Apr 16 20:33:46 2025 -0700

    add entrypoint.sh

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index c6772ea..55d3fba 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -15,9 +15,10 @@ WORKDIR /opt/build
 COPY docker/sesame-tts/requirements.txt ./
 COPY docker/sesame-tts/build.sh ./
 COPY docker/sesame-tts/utils/ ./utils/
+COPY docker/sesame-tts/entrypoint.sh ./
 
-# Make build script executable and run it
-RUN chmod +x ./build.sh && /bin/bash -c "set -e && ./build.sh"
+# Make scripts executable and run build
+RUN chmod +x ./build.sh ./entrypoint.sh && /bin/bash -c "set -e && ./build.sh"
 
 # Add final workdir, health check and default command
 WORKDIR /workspace

commit f0189cf0ea5e1640be6fb30b519c261b853567e9
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Wed Apr 16 20:31:48 2025 -0700

    conda env full path

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 47d84f1..c6772ea 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -24,7 +24,7 @@ WORKDIR /workspace
 
 # Health check - runs inside the container to verify it's functioning properly
 HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
-    CMD conda run -n tts python -c "import torch, moshi, torchao; print('Health check passed.')" || exit 1
+    CMD /opt/conda/bin/conda run -n tts python -c "import torch, moshi, torchao; print('Health check passed.')" || exit 1
 
-# Default command - uses conda environment
-CMD ["conda", "run", "-n", "tts", "--no-capture-output", "bash"]
\ No newline at end of file
+# Default command - uses conda environment with full path
+CMD ["/opt/conda/bin/conda", "run", "-n", "tts", "--no-capture-output", "bash"]
\ No newline at end of file

commit 91114325beccf156c52cc2d5ab8f8c885644eb1c
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Wed Apr 16 20:18:15 2025 -0700

    make scripts executable

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 4e62978..47d84f1 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -16,8 +16,8 @@ COPY docker/sesame-tts/requirements.txt ./
 COPY docker/sesame-tts/build.sh ./
 COPY docker/sesame-tts/utils/ ./utils/
 
-# Run the build script with error checking
-RUN /bin/bash -c "set -e && ./build.sh"
+# Make build script executable and run it
+RUN chmod +x ./build.sh && /bin/bash -c "set -e && ./build.sh"
 
 # Add final workdir, health check and default command
 WORKDIR /workspace

commit 5fcad556c5103b3e573e90686554b5f8414ba91d
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Wed Apr 16 20:16:49 2025 -0700

    Update Dockerfile to Jetson Containers format

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index e69de29..4e62978 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -0,0 +1,30 @@
+ARG BASE_IMAGE=dustynv/pytorch:2.6-r36.4.0-cu128-24.04
+
+FROM ${BASE_IMAGE}
+
+# Add container metadata
+LABEL org.opencontainers.image.description="Sesame CSM text-to-speech for Jetson"
+LABEL org.opencontainers.image.source="https://github.com/SesameAILabs/csm"
+LABEL com.nvidia.jetpack.version="6.1"
+LABEL com.nvidia.cuda.version="12.8"
+
+# Set up working directory for the build process
+WORKDIR /opt/build
+
+# Copy build resources
+COPY docker/sesame-tts/requirements.txt ./
+COPY docker/sesame-tts/build.sh ./
+COPY docker/sesame-tts/utils/ ./utils/
+
+# Run the build script with error checking
+RUN /bin/bash -c "set -e && ./build.sh"
+
+# Add final workdir, health check and default command
+WORKDIR /workspace
+
+# Health check - runs inside the container to verify it's functioning properly
+HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
+    CMD conda run -n tts python -c "import torch, moshi, torchao; print('Health check passed.')" || exit 1
+
+# Default command - uses conda environment
+CMD ["conda", "run", "-n", "tts", "--no-capture-output", "bash"]
\ No newline at end of file

commit 15a8116d7437f7fdd3b7251ba97e9d8e49abde50
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Wed Apr 16 16:19:26 2025 -0700

    Jetson-containers alignment

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 6f10efb..e69de29 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -1,139 +0,0 @@
-# Use DustyNV's PyTorch container for Jetson Orin (JP 6.1 / L4T r36.4.x / Ubuntu 24.04)
-# Includes PyTorch 2.6 and CUDA 12.8
-FROM dustynv/pytorch:2.6-r36.4.0-cu128-24.04
-
-# Add container metadata
-LABEL org.opencontainers.image.description="Sesame CSM text-to-speech for Jetson"
-LABEL org.opencontainers.image.source="https://github.com/SesameAILabs/csm"
-LABEL com.nvidia.jetpack.version="6.1"
-LABEL com.nvidia.cuda.version="12.8"
-
-# Set environment variables
-ENV PYTHONUNBUFFERED=1 \
-    PYTHONDONTWRITEBYTECODE=1 \
-    PIP_DISABLE_PIP_VERSION_CHECK=1 \
-    NO_TORCH_COMPILE=1 \
-    DEBIAN_FRONTEND=noninteractive \
-    MODELS_DIR=/models \
-    AUDIOBOOK_DATA=/audiobook_data \
-    BOOKS_DIR=/books \
-    NVIDIA_VISIBLE_DEVICES=all \
-    NVIDIA_DRIVER_CAPABILITIES=all \
-    CONDA_DIR=/opt/conda \
-    PATH="/root/.cargo/bin:${PATH}"
-
-# Install system dependencies
-RUN apt-get update && apt-get install -y --no-install-recommends \
-    ffmpeg \
-    libsndfile1 \
-    cmake \
-    libopus-dev \
-    build-essential \
-    git \
-    wget \
-    curl \
-    pkg-config \
-    && apt-get clean \
-    && rm -rf /var/lib/apt/lists/* \
-    && echo "✓ System dependencies installed"
-
-# Install Rust (needed for moshi/sphn)
-RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
-    . "$HOME/.cargo/env" && \
-    rustc --version && \
-    cargo --version && \
-    echo "✓ Rust installed"
-
-# Install Miniconda
-RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh -O ~/miniconda.sh && \
-    /bin/bash ~/miniconda.sh -b -p $CONDA_DIR && \
-    rm ~/miniconda.sh
-
-# Add conda to PATH
-ENV PATH=$CONDA_DIR/bin:$PATH
-
-# Create conda environment with Python 3.10
-RUN conda create -y -n tts python=3.10 && \
-    conda clean -ya
-
-# Make RUN commands use the conda environment
-SHELL ["conda", "run", "-n", "tts", "/bin/bash", "-c"]
-
-# Create necessary directories
-RUN mkdir -p /opt/csm ${AUDIOBOOK_DATA} ${BOOKS_DIR} ${MODELS_DIR} /segments
-
-# Install Python dependencies within conda environment
-RUN conda install -y -c conda-forge ffmpeg && \
-    pip install --upgrade pip setuptools wheel && \
-    # Install torch==2.6.0 and compatible torchvision/torchaudio from the Jetson index
-    pip install torch==2.6.0 torchvision torchaudio && \
-    # Install specific versions of packages known to work together
-    pip install tokenizers==0.13.3 transformers==4.31.0 huggingface_hub==0.16.4 accelerate==0.25.0 && \
-    pip install soundfile tqdm pydub psutil ebooklib beautifulsoup4 PyPDF2 pdfminer.six nltk && \
-    # Install einops with specific version for moshi
-    pip install einops==0.7.0 && \
-    # Install moshi specific dependencies
-    pip install "sphn>=0.1.4" sounddevice==0.5.0 && \
-    # Install other dependencies
-    pip install rotary_embedding_torch vector_quantize_pytorch datasets && \
-    # Install torchtune and torchao - We found they work with Python 3.10
-    pip install "torchtune<0.4.0" torchao && \
-    # Install moshi (older version for compatibility)
-    pip install "moshi<=0.2.2" && \
-    echo "✓ Core Python dependencies installed"
-
-# Install silentcipher for watermarking
-RUN pip install "silentcipher @ git+https://github.com/SesameAILabs/silentcipher@master"
-
-# Download essential CSM files
-WORKDIR /opt/csm
-RUN wget -q https://raw.githubusercontent.com/SesameAILabs/csm/main/generator.py && \
-    wget -q https://raw.githubusercontent.com/SesameAILabs/csm/main/models.py && \
-    echo '# CSM package\n\
-from .generator import load_csm_1b, Segment, Generator\n\
-__all__ = ["load_csm_1b", "Segment", "Generator"]\n\
-' > /opt/csm/__init__.py
-
-# Copy the watermarking module
-COPY docker/sesame-tts/utils/watermarking.py /opt/csm/
-RUN chmod +x /opt/csm/watermarking.py
-
-# Copy and apply the generator patch
-COPY docker/sesame-tts/utils/audiobook_generator.py /opt/csm/
-
-# Add CSM to Python path
-RUN python -c "import sys; import site; print(site.getsitepackages()[0])" > /tmp/python_path && \
-    echo 'import sys; sys.path.append("/opt/csm")' > $(cat /tmp/python_path)/csm_path.pth && \
-    rm /tmp/python_path && \
-    echo "✓ CSM added to Python path"
-
-# Download NLTK data
-RUN python -c "import nltk; nltk.download('punkt')" && \
-    echo "✓ NLTK punkt downloaded"
-
-# Create a utilities directory and copy the test script
-RUN mkdir -p /usr/local/bin/utils
-COPY docker/sesame-tts/utils/test_csm.py /usr/local/bin/utils/
-RUN chmod +x /usr/local/bin/utils/test_csm.py
-
-# Copy the audiobook generation scripts
-COPY generate_audiobook_sesame.py ${BOOKS_DIR}/
-COPY generate_audiobook_sesame_epub.py ${BOOKS_DIR}/
-COPY extract_chapters.py ${BOOKS_DIR}/
-
-# Copy the entrypoint script
-COPY docker/sesame-tts/entrypoint.sh /usr/local/bin/entrypoint.sh
-RUN chmod +x /usr/local/bin/entrypoint.sh
-
-# Set working directory
-WORKDIR ${AUDIOBOOK_DATA}
-
-# Add health check
-HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
-    CMD conda run -n tts python -c "import torch, moshi, torchao; print('Health check passed.')" || exit 1
-
-# Set entrypoint
-ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
-
-# Default command - Use conda run to ensure environment is active for bash
-CMD ["conda", "run", "-n", "tts", "--no-capture-output", "bash"]
\ No newline at end of file

commit 1e85a276176f0868094b8ffa40cd0bca054f6cb7
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Wed Apr 16 13:07:35 2025 -0700

    create audiobook_generator subclass

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 69ef76d..6f10efb 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -99,9 +99,7 @@ COPY docker/sesame-tts/utils/watermarking.py /opt/csm/
 RUN chmod +x /opt/csm/watermarking.py
 
 # Copy and apply the generator patch
-COPY docker/sesame-tts/utils/generator_patch.py /opt/csm/
-RUN chmod +x /opt/csm/generator_patch.py
-RUN python -c "import sys; sys.path.append('/opt/csm'); from generator_patch import patch_csm_generator; patch_csm_generator()"
+COPY docker/sesame-tts/utils/audiobook_generator.py /opt/csm/
 
 # Add CSM to Python path
 RUN python -c "import sys; import site; print(site.getsitepackages()[0])" > /tmp/python_path && \

commit be2eb24934e69695ee7f647009beba5df88e61cc
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Wed Apr 16 11:33:21 2025 -0700

    modify the test script to use a simpler approach to generation that might avoid the shape mismatch issues:

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 7582db3..69ef76d 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -76,8 +76,8 @@ RUN conda install -y -c conda-forge ffmpeg && \
     pip install "sphn>=0.1.4" sounddevice==0.5.0 && \
     # Install other dependencies
     pip install rotary_embedding_torch vector_quantize_pytorch datasets && \
-    # REMOVED Install torchtune and torchao
-    # pip install "torchtune<0.4.0" torchao && \
+    # Install torchtune and torchao - We found they work with Python 3.10
+    pip install "torchtune<0.4.0" torchao && \
     # Install moshi (older version for compatibility)
     pip install "moshi<=0.2.2" && \
     echo "✓ Core Python dependencies installed"
@@ -94,10 +94,15 @@ from .generator import load_csm_1b, Segment, Generator\n\
 __all__ = ["load_csm_1b", "Segment", "Generator"]\n\
 ' > /opt/csm/__init__.py
 
-# Copy watermarking module
+# Copy the watermarking module
 COPY docker/sesame-tts/utils/watermarking.py /opt/csm/
 RUN chmod +x /opt/csm/watermarking.py
 
+# Copy and apply the generator patch
+COPY docker/sesame-tts/utils/generator_patch.py /opt/csm/
+RUN chmod +x /opt/csm/generator_patch.py
+RUN python -c "import sys; sys.path.append('/opt/csm'); from generator_patch import patch_csm_generator; patch_csm_generator()"
+
 # Add CSM to Python path
 RUN python -c "import sys; import site; print(site.getsitepackages()[0])" > /tmp/python_path && \
     echo 'import sys; sys.path.append("/opt/csm")' > $(cat /tmp/python_path)/csm_path.pth && \
@@ -125,9 +130,9 @@ RUN chmod +x /usr/local/bin/entrypoint.sh
 # Set working directory
 WORKDIR ${AUDIOBOOK_DATA}
 
-# Add health check - Removed torchao import
+# Add health check
 HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
-    CMD conda run -n tts python -c "import torch, moshi; print('Health check passed.')" || exit 1
+    CMD conda run -n tts python -c "import torch, moshi, torchao; print('Health check passed.')" || exit 1
 
 # Set entrypoint
 ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

commit 51f825b18e2c721c6bed51e3d48a669ad539d7d2
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Wed Apr 16 11:09:48 2025 -0700

    Simplify the entrypoint.sh script to only print the welcome message.
    Modify the CMD in the Dockerfile to explicitly use conda run -n tts bash. This command ensures that the bash shell itself is launched within the context of the activated tts environment.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index ff2f3eb..7582db3 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -132,5 +132,5 @@ HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
 # Set entrypoint
 ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
 
-# Default command - Changed to just bash
-CMD ["bash"]
\ No newline at end of file
+# Default command - Use conda run to ensure environment is active for bash
+CMD ["conda", "run", "-n", "tts", "--no-capture-output", "bash"]
\ No newline at end of file

commit a4c5d2ad6529ec03d226c3c40e7bdca197e74c02
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Wed Apr 16 10:40:18 2025 -0700

    remove the activation from .bashrc and rely solely on the entrypoint script to activate the environment.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 441c2b2..ff2f3eb 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -59,9 +59,6 @@ RUN conda create -y -n tts python=3.10 && \
 # Make RUN commands use the conda environment
 SHELL ["conda", "run", "-n", "tts", "/bin/bash", "-c"]
 
-# Set environment activation on interactive shells
-RUN echo "conda activate tts" >> ~/.bashrc
-
 # Create necessary directories
 RUN mkdir -p /opt/csm ${AUDIOBOOK_DATA} ${BOOKS_DIR} ${MODELS_DIR} /segments
 

commit 4986e3f699ecdc0beff29c38579ff02aa41a3228
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Wed Apr 16 10:29:10 2025 -0700

    duplicate conda run

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 4e3b3ce..441c2b2 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -135,5 +135,5 @@ HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
 # Set entrypoint
 ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
 
-# Default command
-CMD ["conda", "run", "--no-capture-output", "-n", "tts", "bash"]
\ No newline at end of file
+# Default command - Changed to just bash
+CMD ["bash"]
\ No newline at end of file

commit 15ed2a95569c18e01f11d4748a27d2a2d7309e5d
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 23:41:23 2025 -0700

    Remove torchtune and torchao installation, revert Python to 3.10, update torch install, and fix HEALTHCHECK.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index bb6e8b9..4e3b3ce 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -52,8 +52,8 @@ RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aar
 # Add conda to PATH
 ENV PATH=$CONDA_DIR/bin:$PATH
 
-# Create conda environment with Python 3.9
-RUN conda create -y -n tts python=3.9 && \
+# Create conda environment with Python 3.10
+RUN conda create -y -n tts python=3.10 && \
     conda clean -ya
 
 # Make RUN commands use the conda environment
@@ -68,6 +68,8 @@ RUN mkdir -p /opt/csm ${AUDIOBOOK_DATA} ${BOOKS_DIR} ${MODELS_DIR} /segments
 # Install Python dependencies within conda environment
 RUN conda install -y -c conda-forge ffmpeg && \
     pip install --upgrade pip setuptools wheel && \
+    # Install torch==2.6.0 and compatible torchvision/torchaudio from the Jetson index
+    pip install torch==2.6.0 torchvision torchaudio && \
     # Install specific versions of packages known to work together
     pip install tokenizers==0.13.3 transformers==4.31.0 huggingface_hub==0.16.4 accelerate==0.25.0 && \
     pip install soundfile tqdm pydub psutil ebooklib beautifulsoup4 PyPDF2 pdfminer.six nltk && \
@@ -77,8 +79,8 @@ RUN conda install -y -c conda-forge ffmpeg && \
     pip install "sphn>=0.1.4" sounddevice==0.5.0 && \
     # Install other dependencies
     pip install rotary_embedding_torch vector_quantize_pytorch datasets && \
-    # Install torchtune and torchao - Removed torchao version constraint
-    pip install "torchtune<0.4.0" torchao && \
+    # REMOVED Install torchtune and torchao
+    # pip install "torchtune<0.4.0" torchao && \
     # Install moshi (older version for compatibility)
     pip install "moshi<=0.2.2" && \
     echo "✓ Core Python dependencies installed"
@@ -126,9 +128,9 @@ RUN chmod +x /usr/local/bin/entrypoint.sh
 # Set working directory
 WORKDIR ${AUDIOBOOK_DATA}
 
-# Add health check
+# Add health check - Removed torchao import
 HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
-    CMD conda run -n tts python -c "import torch, torchao, moshi; print('Health check passed.')" || exit 1
+    CMD conda run -n tts python -c "import torch, moshi; print('Health check passed.')" || exit 1
 
 # Set entrypoint
 ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

commit 60e4439e041ad02cf6f7ffd669787342a1c612df
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 23:26:57 2025 -0700

    allow pip to find and install the compatible torchao wheel for Python 3.9.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 30a8016..bb6e8b9 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -52,8 +52,8 @@ RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aar
 # Add conda to PATH
 ENV PATH=$CONDA_DIR/bin:$PATH
 
-# Create conda environment with Python 3.10
-RUN conda create -y -n tts python=3.10 && \
+# Create conda environment with Python 3.9
+RUN conda create -y -n tts python=3.9 && \
     conda clean -ya
 
 # Make RUN commands use the conda environment
@@ -77,8 +77,8 @@ RUN conda install -y -c conda-forge ffmpeg && \
     pip install "sphn>=0.1.4" sounddevice==0.5.0 && \
     # Install other dependencies
     pip install rotary_embedding_torch vector_quantize_pytorch datasets && \
-    # Install torchtune and torchao with compatible versions
-    pip install "torchtune<0.4.0" "torchao<0.5.0" && \
+    # Install torchtune and torchao - Removed torchao version constraint
+    pip install "torchtune<0.4.0" torchao && \
     # Install moshi (older version for compatibility)
     pip install "moshi<=0.2.2" && \
     echo "✓ Core Python dependencies installed"

commit 9d5ca9275909f6f06f2626f84c5b4accb91f6664
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 22:12:53 2025 -0700

    remove the line installing torch, torchvision, and torchaudio from the Dockerfile.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 9c81743..30a8016 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -68,8 +68,6 @@ RUN mkdir -p /opt/csm ${AUDIOBOOK_DATA} ${BOOKS_DIR} ${MODELS_DIR} /segments
 # Install Python dependencies within conda environment
 RUN conda install -y -c conda-forge ffmpeg && \
     pip install --upgrade pip setuptools wheel && \
-    # Install torch packages first
-    pip install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 && \
     # Install specific versions of packages known to work together
     pip install tokenizers==0.13.3 transformers==4.31.0 huggingface_hub==0.16.4 accelerate==0.25.0 && \
     pip install soundfile tqdm pydub psutil ebooklib beautifulsoup4 PyPDF2 pdfminer.six nltk && \

commit 30bf26b026b36c94183c667cb67400f05277aba6
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 22:00:08 2025 -0700

    add the necessary COPY and RUN chmod +x commands to the Dockerfile.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 65144b9..9c81743 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -1,5 +1,6 @@
-# Use NVIDIA's CUDA base image for Jetson Orin
-FROM nvcr.io/nvidia/cuda:12.8.0-devel-ubuntu22.04
+# Use DustyNV's PyTorch container for Jetson Orin (JP 6.1 / L4T r36.4.x / Ubuntu 24.04)
+# Includes PyTorch 2.6 and CUDA 12.8
+FROM dustynv/pytorch:2.6-r36.4.0-cu128-24.04
 
 # Add container metadata
 LABEL org.opencontainers.image.description="Sesame CSM text-to-speech for Jetson"

commit 07021831c7151651ec9a7d19239531f91f0ab8e3
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 20:28:41 2025 -0700

    installing the moshi package, which is failing because it depends on a package called sphn that requires Rust to compile.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index af1f043..65144b9 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -18,7 +18,8 @@ ENV PYTHONUNBUFFERED=1 \
     BOOKS_DIR=/books \
     NVIDIA_VISIBLE_DEVICES=all \
     NVIDIA_DRIVER_CAPABILITIES=all \
-    CONDA_DIR=/opt/conda
+    CONDA_DIR=/opt/conda \
+    PATH="/root/.cargo/bin:${PATH}"
 
 # Install system dependencies
 RUN apt-get update && apt-get install -y --no-install-recommends \
@@ -30,12 +31,19 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
     git \
     wget \
     curl \
+    pkg-config \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/* \
     && echo "✓ System dependencies installed"
 
+# Install Rust (needed for moshi/sphn)
+RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
+    . "$HOME/.cargo/env" && \
+    rustc --version && \
+    cargo --version && \
+    echo "✓ Rust installed"
+
 # Install Miniconda
-# Use the aarch64 installer for Jetson (ARM architecture)
 RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh -O ~/miniconda.sh && \
     /bin/bash ~/miniconda.sh -b -p $CONDA_DIR && \
     rm ~/miniconda.sh
@@ -59,12 +67,21 @@ RUN mkdir -p /opt/csm ${AUDIOBOOK_DATA} ${BOOKS_DIR} ${MODELS_DIR} /segments
 # Install Python dependencies within conda environment
 RUN conda install -y -c conda-forge ffmpeg && \
     pip install --upgrade pip setuptools wheel && \
-    pip install -U torch torchvision torchaudio \
-    tokenizers transformers huggingface_hub accelerate \
-    soundfile tqdm pydub psutil ebooklib beautifulsoup4 \
-    PyPDF2 pdfminer.six nltk einops rotary_embedding_torch \
-    vector_quantize_pytorch datasets && \
-    pip install torchtune torchao moshi && \
+    # Install torch packages first
+    pip install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 && \
+    # Install specific versions of packages known to work together
+    pip install tokenizers==0.13.3 transformers==4.31.0 huggingface_hub==0.16.4 accelerate==0.25.0 && \
+    pip install soundfile tqdm pydub psutil ebooklib beautifulsoup4 PyPDF2 pdfminer.six nltk && \
+    # Install einops with specific version for moshi
+    pip install einops==0.7.0 && \
+    # Install moshi specific dependencies
+    pip install "sphn>=0.1.4" sounddevice==0.5.0 && \
+    # Install other dependencies
+    pip install rotary_embedding_torch vector_quantize_pytorch datasets && \
+    # Install torchtune and torchao with compatible versions
+    pip install "torchtune<0.4.0" "torchao<0.5.0" && \
+    # Install moshi (older version for compatibility)
+    pip install "moshi<=0.2.2" && \
     echo "✓ Core Python dependencies installed"
 
 # Install silentcipher for watermarking

commit 401ce3695a2f029e56d67f92b3cfb57990df2b59
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 20:09:12 2025 -0700

    Update the Miniconda download URL to use the aarch64 installer.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 8a04daa..af1f043 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -35,7 +35,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
     && echo "✓ System dependencies installed"
 
 # Install Miniconda
-RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \
+# Use the aarch64 installer for Jetson (ARM architecture)
+RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh -O ~/miniconda.sh && \
     /bin/bash ~/miniconda.sh -b -p $CONDA_DIR && \
     rm ~/miniconda.sh
 

commit d1ca6e4c3322a8671194ebaac0830e1b11baacde
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 19:44:02 2025 -0700

    trying with conda instead of wheels

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index d2be8cc..8a04daa 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -1,7 +1,5 @@
-# Use the official torchao image for JetPack 6.1+ (L4T r36.4.0)
-# Includes PyTorch 2.6, CUDA 12.8, torchao 0.11.0
-ARG BASE_IMAGE=dustynv/torchao:0.11.0-r36.4.0-cu128-24.04
-FROM ${BASE_IMAGE}
+# Use NVIDIA's CUDA base image for Jetson Orin
+FROM nvcr.io/nvidia/cuda:12.8.0-devel-ubuntu22.04
 
 # Add container metadata
 LABEL org.opencontainers.image.description="Sesame CSM text-to-speech for Jetson"
@@ -9,163 +7,114 @@ LABEL org.opencontainers.image.source="https://github.com/SesameAILabs/csm"
 LABEL com.nvidia.jetpack.version="6.1"
 LABEL com.nvidia.cuda.version="12.8"
 
-# This image is based on JetPack 6.1+ (L4T r36.4.x) with Ubuntu 24.04
-
 # Set environment variables
 ENV PYTHONUNBUFFERED=1 \
     PYTHONDONTWRITEBYTECODE=1 \
     PIP_DISABLE_PIP_VERSION_CHECK=1 \
     NO_TORCH_COMPILE=1 \
-    PATH="/root/.cargo/bin:${PATH}" \
     DEBIAN_FRONTEND=noninteractive \
     MODELS_DIR=/models \
     AUDIOBOOK_DATA=/audiobook_data \
     BOOKS_DIR=/books \
     NVIDIA_VISIBLE_DEVICES=all \
     NVIDIA_DRIVER_CAPABILITIES=all \
-    # Explicitly set the pip index URL to use the Jetson pip server
-    # This provides pre-built wheels optimized for Jetson, speeding up builds
-    # and avoiding potential compilation issues for complex packages.
-    PIP_INDEX_URL=https://pypi.jetson-ai-lab.dev/jp6/cu128
+    CONDA_DIR=/opt/conda
 
-# Install system dependencies (git, wget, curl, unzip already in base)
-# Add ffmpeg, libsndfile1, python3-pip, cmake, libopus-dev, build-essential
+# Install system dependencies
 RUN apt-get update && apt-get install -y --no-install-recommends \
     ffmpeg \
     libsndfile1 \
-    python3-pip \
-    # Add cmake and libopus-dev for building dependencies like sphn (via audiopus_sys)
     cmake \
     libopus-dev \
-    # Add build-essential for packages needing compilation
     build-essential \
+    git \
+    wget \
+    curl \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/* \
     && echo "✓ System dependencies installed"
 
-# Install Rust/Cargo (needed for some Python dependencies)
-# Rust/Cargo might already be in the base, but installing ensures it's present
-RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
-    && echo "✓ Rust installed: $(rustc --version)"
+# Install Miniconda
+RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \
+    /bin/bash ~/miniconda.sh -b -p $CONDA_DIR && \
+    rm ~/miniconda.sh
+
+# Add conda to PATH
+ENV PATH=$CONDA_DIR/bin:$PATH
+
+# Create conda environment with Python 3.10
+RUN conda create -y -n tts python=3.10 && \
+    conda clean -ya
+
+# Make RUN commands use the conda environment
+SHELL ["conda", "run", "-n", "tts", "/bin/bash", "-c"]
+
+# Set environment activation on interactive shells
+RUN echo "conda activate tts" >> ~/.bashrc
 
 # Create necessary directories
-RUN mkdir -p /opt/csm ${AUDIOBOOK_DATA} ${BOOKS_DIR} ${MODELS_DIR} \
-    && echo "✓ Directories created"
-
-# Check if torchaudio is already in the base image
-RUN python3 -c "import torchaudio; print(f'✓ Torchaudio version found in base: {torchaudio.__version__}')" || \
-    echo "✓ Torchaudio not found in base image, will attempt install."
-
-# Upgrade pip and install core dependencies
-# NOTE: PyTorch and torchao are provided by the base image. Torchaudio might be.
-# Install moshi and triton as they are required by CSM/runtime.
-# Skip torchao import check during build due to conflict with installed triton.
-RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
-    pip3 install --no-cache-dir \
-    tokenizers \
-    transformers \
-    huggingface_hub \
-    accelerate \
-    soundfile \
-    tqdm \
-    pydub \
-    psutil \
-    ebooklib \
-    beautifulsoup4 \
-    PyPDF2 \
-    pdfminer.six \
-    nltk \
-    # Install runtime dependencies: moshi, triton
-    moshi \
-    triton \
-    # torchao is provided by base image
-    # Attempt to install torchaudio==2.6.0 only if not found in base
-    && (python3 -c "import torchaudio" || pip3 install --no-cache-dir torchaudio==2.6.0 || echo "⚠️ Warning: Failed to install torchaudio==2.6.0") \
-    && echo "✓ Core Python dependencies installed" \
-    # Verify imports and check versions
-    && python3 -c "import torch; print(f'✓ PyTorch version: {torch.__version__}')" \
-    && python3 -c "import torch; print(f'✓ PyTorch CUDA version: {torch.version.cuda}')" \
-    # Verify transformers version
-    && python3 -c "import transformers; print(f'✓ Transformers version: {transformers.__version__}')" \
-    # Verify torchaudio import again after potential install
-    && (python3 -c "import torchaudio; print(f'✓ Torchaudio version: {torchaudio.__version__}')" || echo "⚠️ Warning: Torchaudio import failed after install attempt") \
-    # Verify moshi and triton imports
-    && (python3 -c "import moshi; print('✓ Moshi imported successfully')" || echo "⚠️ Warning: Moshi import failed") \
-    && (python3 -c "import triton; print('✓ Triton imported successfully')" || echo "⚠️ Warning: Triton import failed")
-
-# Install CSM additional dependencies (with fallbacks for packages that might fail)
-RUN pip3 install --no-cache-dir einops && \
-    echo "✓ Installed einops: $(pip show einops | grep Version)" || echo "Warning: Failed to install einops" && \
-    pip3 install --no-cache-dir rotary_embedding_torch && \
-    echo "✓ Installed rotary_embedding_torch: $(pip show rotary_embedding_torch | grep Version)" || echo "Warning: Failed to install rotary_embedding_torch" && \
-    pip3 install --no-cache-dir vector_quantize_pytorch && \
-    echo "✓ Installed vector_quantize_pytorch: $(pip show vector_quantize_pytorch | grep Version)" || echo "Warning: Failed to install vector_quantize_pytorch" && \
-    pip3 install --no-cache-dir datasets && \
-    echo "✓ Installed datasets: $(pip show datasets | grep Version)" || echo "Warning: Failed to install datasets"
-
-# Install torchtune (try PyPI first, then GitHub)
-# Fail build if this step fails
-RUN (pip3 install --no-cache-dir torchtune && \
-     echo "✓ Installed torchtune from PyPI: $(pip show torchtune | grep Version)") || \
-    (export GIT_TERMINAL_PROMPT=0 && \
-     pip3 install --no-cache-dir git+https://github.com/pytorch/torchtune.git && \
-     echo "✓ Installed torchtune from GitHub") || \
-    (echo "ERROR: Failed to install torchtune from both PyPI and GitHub." && exit 1)
-
-
-# Download essential CSM files instead of cloning the full repository
+RUN mkdir -p /opt/csm ${AUDIOBOOK_DATA} ${BOOKS_DIR} ${MODELS_DIR} /segments
+
+# Install Python dependencies within conda environment
+RUN conda install -y -c conda-forge ffmpeg && \
+    pip install --upgrade pip setuptools wheel && \
+    pip install -U torch torchvision torchaudio \
+    tokenizers transformers huggingface_hub accelerate \
+    soundfile tqdm pydub psutil ebooklib beautifulsoup4 \
+    PyPDF2 pdfminer.six nltk einops rotary_embedding_torch \
+    vector_quantize_pytorch datasets && \
+    pip install torchtune torchao moshi && \
+    echo "✓ Core Python dependencies installed"
+
+# Install silentcipher for watermarking
+RUN pip install "silentcipher @ git+https://github.com/SesameAILabs/silentcipher@master"
+
+# Download essential CSM files
 WORKDIR /opt/csm
 RUN wget -q https://raw.githubusercontent.com/SesameAILabs/csm/main/generator.py && \
     wget -q https://raw.githubusercontent.com/SesameAILabs/csm/main/models.py && \
-    echo "✓ CSM files downloaded"
-
-# Create simple Python module to make imports work
-RUN echo '# CSM package\n\
+    echo '# CSM package\n\
 from .generator import load_csm_1b, Segment, Generator\n\
 __all__ = ["load_csm_1b", "Segment", "Generator"]\n\
 ' > /opt/csm/__init__.py
 
-# Add CSM to Python path directly instead of installing it
-RUN python3 -c "import sys; import site; print(site.getsitepackages()[0])" > /tmp/python_path && \
+# Copy watermarking module
+COPY docker/sesame-tts/utils/watermarking.py /opt/csm/
+RUN chmod +x /opt/csm/watermarking.py
+
+# Add CSM to Python path
+RUN python -c "import sys; import site; print(site.getsitepackages()[0])" > /tmp/python_path && \
     echo 'import sys; sys.path.append("/opt/csm")' > $(cat /tmp/python_path)/csm_path.pth && \
     rm /tmp/python_path && \
     echo "✓ CSM added to Python path"
 
 # Download NLTK data
-RUN python3 -c "import nltk; nltk.download('punkt')" && \
+RUN python -c "import nltk; nltk.download('punkt')" && \
     echo "✓ NLTK punkt downloaded"
 
-# Create a utilities directory
+# Create a utilities directory and copy the test script
 RUN mkdir -p /usr/local/bin/utils
-
-# Copy the test script from the repository
 COPY docker/sesame-tts/utils/test_csm.py /usr/local/bin/utils/
-RUN chmod +x /usr/local/bin/utils/test_csm.py && \
-    echo "✓ Test script copied"
+RUN chmod +x /usr/local/bin/utils/test_csm.py
 
-# Verify CUDA is available
-RUN echo "✓ CUDA Availability: $(python3 -c "import torch; print(torch.cuda.is_available())")" && \
-    echo "✓ CUDA Version: $(python3 -c "import torch; print(torch.version.cuda if torch.cuda.is_available() else 'Not available')")" && \
-    echo "✓ Device Count: $(python3 -c "import torch; print(torch.cuda.device_count())")"
+# Copy the audiobook generation scripts
+COPY generate_audiobook_sesame.py ${BOOKS_DIR}/
+COPY generate_audiobook_sesame_epub.py ${BOOKS_DIR}/
+COPY extract_chapters.py ${BOOKS_DIR}/
 
 # Copy the entrypoint script
 COPY docker/sesame-tts/entrypoint.sh /usr/local/bin/entrypoint.sh
-RUN chmod +x /usr/local/bin/entrypoint.sh && \
-    echo "✓ Entrypoint script installed"
+RUN chmod +x /usr/local/bin/entrypoint.sh
 
 # Set working directory
 WORKDIR ${AUDIOBOOK_DATA}
 
-# Add health check to ensure container is functioning properly
-# torchao should be present from base image
+# Add health check
 HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
-    CMD python3 -c "import torch, torchaudio, torchao, csm, moshi, triton; print('Health check passed.')" || exit 1
-
-# Print build completion message
-RUN echo "✓ Sesame-TTS container build completed successfully!"
+    CMD conda run -n tts python -c "import torch, torchao, moshi; print('Health check passed.')" || exit 1
 
 # Set entrypoint
 ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
 
 # Default command
-CMD ["bash"]
\ No newline at end of file
+CMD ["conda", "run", "--no-capture-output", "-n", "tts", "bash"]
\ No newline at end of file

commit 3769805faccc8ea0024126eac1d02146b08a0b0e
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 19:14:24 2025 -0700

    Revert base image, remove explicit torchao install, remove torchao build-time check.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 99e6c82..d2be8cc 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -1,6 +1,6 @@
-# Use the dustynv PyTorch image for JetPack 6.1+ (L4T r36.4.0)
-# Includes PyTorch 2.6, CUDA 12.8. Does NOT include torchao by default.
-ARG BASE_IMAGE=dustynv/pytorch:2.6-r36.4.0-cu128-24.04
+# Use the official torchao image for JetPack 6.1+ (L4T r36.4.0)
+# Includes PyTorch 2.6, CUDA 12.8, torchao 0.11.0
+ARG BASE_IMAGE=dustynv/torchao:0.11.0-r36.4.0-cu128-24.04
 FROM ${BASE_IMAGE}
 
 # Add container metadata
@@ -57,8 +57,9 @@ RUN python3 -c "import torchaudio; print(f'✓ Torchaudio version found in base:
     echo "✓ Torchaudio not found in base image, will attempt install."
 
 # Upgrade pip and install core dependencies
-# NOTE: PyTorch is provided by the base image. Torchaudio might be.
-# Install moshi, triton, and torchao as they are required by CSM/torchtune/runtime.
+# NOTE: PyTorch and torchao are provided by the base image. Torchaudio might be.
+# Install moshi and triton as they are required by CSM/runtime.
+# Skip torchao import check during build due to conflict with installed triton.
 RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     pip3 install --no-cache-dir \
     tokenizers \
@@ -77,16 +78,14 @@ RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     # Install runtime dependencies: moshi, triton
     moshi \
     triton \
-    # Install torchao (required by torchtune, which is required by CSM)
-    torchao==0.11.0 \
+    # torchao is provided by base image
     # Attempt to install torchaudio==2.6.0 only if not found in base
     && (python3 -c "import torchaudio" || pip3 install --no-cache-dir torchaudio==2.6.0 || echo "⚠️ Warning: Failed to install torchaudio==2.6.0") \
     && echo "✓ Core Python dependencies installed" \
     # Verify imports and check versions
     && python3 -c "import torch; print(f'✓ PyTorch version: {torch.__version__}')" \
     && python3 -c "import torch; print(f'✓ PyTorch CUDA version: {torch.version.cuda}')" \
-    # Verify torchao installation
-    && python3 -c "import torchao; print(f'✓ torchao version: {torchao.__version__}')" \
+    # Verify transformers version
     && python3 -c "import transformers; print(f'✓ Transformers version: {transformers.__version__}')" \
     # Verify torchaudio import again after potential install
     && (python3 -c "import torchaudio; print(f'✓ Torchaudio version: {torchaudio.__version__}')" || echo "⚠️ Warning: Torchaudio import failed after install attempt") \
@@ -158,7 +157,7 @@ RUN chmod +x /usr/local/bin/entrypoint.sh && \
 WORKDIR ${AUDIOBOOK_DATA}
 
 # Add health check to ensure container is functioning properly
-# Add torchao back to the check
+# torchao should be present from base image
 HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
     CMD python3 -c "import torch, torchaudio, torchao, csm, moshi, triton; print('Health check passed.')" || exit 1
 

commit afcf5be32aa7ab2393e1642b415fdbd6e3db1d22
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 14:24:28 2025 -0700

    dependency chain and the strategy of installing torchao explicitly.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 4039910..99e6c82 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -58,8 +58,7 @@ RUN python3 -c "import torchaudio; print(f'✓ Torchaudio version found in base:
 
 # Upgrade pip and install core dependencies
 # NOTE: PyTorch is provided by the base image. Torchaudio might be.
-# Install moshi and triton as they are required by CSM/runtime.
-# torchao is NOT included in this base image and not installed.
+# Install moshi, triton, and torchao as they are required by CSM/torchtune/runtime.
 RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     pip3 install --no-cache-dir \
     tokenizers \
@@ -75,16 +74,19 @@ RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     PyPDF2 \
     pdfminer.six \
     nltk \
-    # Install moshi and triton (runtime dependencies)
+    # Install runtime dependencies: moshi, triton
     moshi \
     triton \
+    # Install torchao (required by torchtune, which is required by CSM)
+    torchao==0.11.0 \
     # Attempt to install torchaudio==2.6.0 only if not found in base
     && (python3 -c "import torchaudio" || pip3 install --no-cache-dir torchaudio==2.6.0 || echo "⚠️ Warning: Failed to install torchaudio==2.6.0") \
     && echo "✓ Core Python dependencies installed" \
     # Verify imports and check versions
     && python3 -c "import torch; print(f'✓ PyTorch version: {torch.__version__}')" \
     && python3 -c "import torch; print(f'✓ PyTorch CUDA version: {torch.version.cuda}')" \
-    # torchao is not expected here
+    # Verify torchao installation
+    && python3 -c "import torchao; print(f'✓ torchao version: {torchao.__version__}')" \
     && python3 -c "import transformers; print(f'✓ Transformers version: {transformers.__version__}')" \
     # Verify torchaudio import again after potential install
     && (python3 -c "import torchaudio; print(f'✓ Torchaudio version: {torchaudio.__version__}')" || echo "⚠️ Warning: Torchaudio import failed after install attempt") \
@@ -156,9 +158,9 @@ RUN chmod +x /usr/local/bin/entrypoint.sh && \
 WORKDIR ${AUDIOBOOK_DATA}
 
 # Add health check to ensure container is functioning properly
-# Remove torchao check, keep others
+# Add torchao back to the check
 HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
-    CMD python3 -c "import torch, torchaudio, csm, moshi, triton; print('Health check passed.')" || exit 1
+    CMD python3 -c "import torch, torchaudio, torchao, csm, moshi, triton; print('Health check passed.')" || exit 1
 
 # Print build completion message
 RUN echo "✓ Sesame-TTS container build completed successfully!"

commit 21fe79764c48ee9de31894d28c37220b5a445a2a
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 14:08:14 2025 -0700

    Move moshi and triton into the main pip3 install command list.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 243897b..4039910 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -75,11 +75,11 @@ RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     PyPDF2 \
     pdfminer.six \
     nltk \
-    # Attempt to install torchaudio==2.6.0 only if not found in base
-    && (python3 -c "import torchaudio" || pip3 install --no-cache-dir torchaudio==2.6.0 || echo "⚠️ Warning: Failed to install torchaudio==2.6.0") \
     # Install moshi and triton (runtime dependencies)
     moshi \
     triton \
+    # Attempt to install torchaudio==2.6.0 only if not found in base
+    && (python3 -c "import torchaudio" || pip3 install --no-cache-dir torchaudio==2.6.0 || echo "⚠️ Warning: Failed to install torchaudio==2.6.0") \
     && echo "✓ Core Python dependencies installed" \
     # Verify imports and check versions
     && python3 -c "import torch; print(f'✓ PyTorch version: {torch.__version__}')" \

commit ecc96589bfe36d4f95a9284799c6f7c85274c434
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 13:53:53 2025 -0700

    Change the base image to dustynv/pytorch:2.6-r36.4.0-cu128-24.04.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index d02b648..243897b 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -1,6 +1,6 @@
-# Use the official L4T PyTorch image for JetPack 6.1+ (L4T r36.4.0)
+# Use the dustynv PyTorch image for JetPack 6.1+ (L4T r36.4.0)
 # Includes PyTorch 2.6, CUDA 12.8. Does NOT include torchao by default.
-ARG BASE_IMAGE=nvcr.io/nvidia/l4t-pytorch:r36.4.0-pth2.6-py3
+ARG BASE_IMAGE=dustynv/pytorch:2.6-r36.4.0-cu128-24.04
 FROM ${BASE_IMAGE}
 
 # Add container metadata
@@ -59,7 +59,7 @@ RUN python3 -c "import torchaudio; print(f'✓ Torchaudio version found in base:
 # Upgrade pip and install core dependencies
 # NOTE: PyTorch is provided by the base image. Torchaudio might be.
 # Install moshi and triton as they are required by CSM/runtime.
-# torchao is NOT included in this base image and not installed, resolving the previous conflict.
+# torchao is NOT included in this base image and not installed.
 RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     pip3 install --no-cache-dir \
     tokenizers \
@@ -92,7 +92,6 @@ RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     && (python3 -c "import moshi; print('✓ Moshi imported successfully')" || echo "⚠️ Warning: Moshi import failed") \
     && (python3 -c "import triton; print('✓ Triton imported successfully')" || echo "⚠️ Warning: Triton import failed")
 
-
 # Install CSM additional dependencies (with fallbacks for packages that might fail)
 RUN pip3 install --no-cache-dir einops && \
     echo "✓ Installed einops: $(pip show einops | grep Version)" || echo "Warning: Failed to install einops" && \

commit b35c01d6630b7c1d3f717ea6664642026bc1d023
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 13:52:11 2025 -0700

    remove torchao depency

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 733bd26..d02b648 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -1,6 +1,6 @@
-# Use the official torchao image for JetPack 6.1+ (L4T r36.4.0)
-# Includes PyTorch 2.6, CUDA 12.8, torchao 0.11.0
-ARG BASE_IMAGE=dustynv/torchao:0.11.0-r36.4.0-cu128-24.04
+# Use the official L4T PyTorch image for JetPack 6.1+ (L4T r36.4.0)
+# Includes PyTorch 2.6, CUDA 12.8. Does NOT include torchao by default.
+ARG BASE_IMAGE=nvcr.io/nvidia/l4t-pytorch:r36.4.0-pth2.6-py3
 FROM ${BASE_IMAGE}
 
 # Add container metadata
@@ -24,6 +24,8 @@ ENV PYTHONUNBUFFERED=1 \
     NVIDIA_VISIBLE_DEVICES=all \
     NVIDIA_DRIVER_CAPABILITIES=all \
     # Explicitly set the pip index URL to use the Jetson pip server
+    # This provides pre-built wheels optimized for Jetson, speeding up builds
+    # and avoiding potential compilation issues for complex packages.
     PIP_INDEX_URL=https://pypi.jetson-ai-lab.dev/jp6/cu128
 
 # Install system dependencies (git, wget, curl, unzip already in base)
@@ -46,8 +48,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
 RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
     && echo "✓ Rust installed: $(rustc --version)"
 
-# Build dependencies (cmake, ninja-build) are no longer needed for torchao
-
 # Create necessary directories
 RUN mkdir -p /opt/csm ${AUDIOBOOK_DATA} ${BOOKS_DIR} ${MODELS_DIR} \
     && echo "✓ Directories created"
@@ -57,8 +57,9 @@ RUN python3 -c "import torchaudio; print(f'✓ Torchaudio version found in base:
     echo "✓ Torchaudio not found in base image, will attempt install."
 
 # Upgrade pip and install core dependencies
-# NOTE: PyTorch and torchao are provided by the base image. Torchaudio might be.
-# Rely on base image for triton if needed by torchao. Remove moshi.
+# NOTE: PyTorch is provided by the base image. Torchaudio might be.
+# Install moshi and triton as they are required by CSM/runtime.
+# torchao is NOT included in this base image and not installed, resolving the previous conflict.
 RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     pip3 install --no-cache-dir \
     tokenizers \
@@ -76,14 +77,21 @@ RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     nltk \
     # Attempt to install torchaudio==2.6.0 only if not found in base
     && (python3 -c "import torchaudio" || pip3 install --no-cache-dir torchaudio==2.6.0 || echo "⚠️ Warning: Failed to install torchaudio==2.6.0") \
+    # Install moshi and triton (runtime dependencies)
+    moshi \
+    triton \
     && echo "✓ Core Python dependencies installed" \
     # Verify imports and check versions
     && python3 -c "import torch; print(f'✓ PyTorch version: {torch.__version__}')" \
     && python3 -c "import torch; print(f'✓ PyTorch CUDA version: {torch.version.cuda}')" \
-    && python3 -c "import torchao; print(f'✓ torchao version: {torchao.__version__}')" \
+    # torchao is not expected here
     && python3 -c "import transformers; print(f'✓ Transformers version: {transformers.__version__}')" \
     # Verify torchaudio import again after potential install
-    && (python3 -c "import torchaudio; print(f'✓ Torchaudio version: {torchaudio.__version__}')" || echo "⚠️ Warning: Torchaudio import failed after install attempt")
+    && (python3 -c "import torchaudio; print(f'✓ Torchaudio version: {torchaudio.__version__}')" || echo "⚠️ Warning: Torchaudio import failed after install attempt") \
+    # Verify moshi and triton imports
+    && (python3 -c "import moshi; print('✓ Moshi imported successfully')" || echo "⚠️ Warning: Moshi import failed") \
+    && (python3 -c "import triton; print('✓ Triton imported successfully')" || echo "⚠️ Warning: Triton import failed")
+
 
 # Install CSM additional dependencies (with fallbacks for packages that might fail)
 RUN pip3 install --no-cache-dir einops && \
@@ -95,12 +103,6 @@ RUN pip3 install --no-cache-dir einops && \
     pip3 install --no-cache-dir datasets && \
     echo "✓ Installed datasets: $(pip show datasets | grep Version)" || echo "Warning: Failed to install datasets"
 
-# Remove the redundant torchaudio installation block below
-# RUN pip3 install --no-cache-dir torchaudio==2.6.0 && \
-#    ... (removed) ...
-
-# torchao is included in the base image - no manual installation needed
-
 # Install torchtune (try PyPI first, then GitHub)
 # Fail build if this step fails
 RUN (pip3 install --no-cache-dir torchtune && \
@@ -155,9 +157,9 @@ RUN chmod +x /usr/local/bin/entrypoint.sh && \
 WORKDIR ${AUDIOBOOK_DATA}
 
 # Add health check to ensure container is functioning properly
-# Remove moshi and triton checks
+# Remove torchao check, keep others
 HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
-    CMD python3 -c "import torch, torchaudio, torchao, csm; print('Health check passed.')" || exit 1
+    CMD python3 -c "import torch, torchaudio, csm, moshi, triton; print('Health check passed.')" || exit 1
 
 # Print build completion message
 RUN echo "✓ Sesame-TTS container build completed successfully!"

commit 5623adc72a2fdc1e0ec6e5bc5af63adf544aad48
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 13:16:58 2025 -0700

    remove the explicit installation of triton and moshi

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 02c6347..733bd26 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -27,7 +27,7 @@ ENV PYTHONUNBUFFERED=1 \
     PIP_INDEX_URL=https://pypi.jetson-ai-lab.dev/jp6/cu128
 
 # Install system dependencies (git, wget, curl, unzip already in base)
-# Add ffmpeg, libsndfile1, python3-pip, cmake, libopus-dev
+# Add ffmpeg, libsndfile1, python3-pip, cmake, libopus-dev, build-essential
 RUN apt-get update && apt-get install -y --no-install-recommends \
     ffmpeg \
     libsndfile1 \
@@ -35,6 +35,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
     # Add cmake and libopus-dev for building dependencies like sphn (via audiopus_sys)
     cmake \
     libopus-dev \
+    # Add build-essential for packages needing compilation
+    build-essential \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/* \
     && echo "✓ System dependencies installed"
@@ -50,8 +52,13 @@ RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
 RUN mkdir -p /opt/csm ${AUDIOBOOK_DATA} ${BOOKS_DIR} ${MODELS_DIR} \
     && echo "✓ Directories created"
 
+# Check if torchaudio is already in the base image
+RUN python3 -c "import torchaudio; print(f'✓ Torchaudio version found in base: {torchaudio.__version__}')" || \
+    echo "✓ Torchaudio not found in base image, will attempt install."
+
 # Upgrade pip and install core dependencies
-# NOTE: PyTorch and torchao are provided by the base image, but torchaudio is not
+# NOTE: PyTorch and torchao are provided by the base image. Torchaudio might be.
+# Rely on base image for triton if needed by torchao. Remove moshi.
 RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     pip3 install --no-cache-dir \
     tokenizers \
@@ -67,19 +74,16 @@ RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     PyPDF2 \
     pdfminer.six \
     nltk \
-    # Install torchaudio with a version that matches PyTorch 2.6.0
-    torchaudio==2.6.0 \
-    # Add moshi and triton
-    moshi \
-    triton \
+    # Attempt to install torchaudio==2.6.0 only if not found in base
+    && (python3 -c "import torchaudio" || pip3 install --no-cache-dir torchaudio==2.6.0 || echo "⚠️ Warning: Failed to install torchaudio==2.6.0") \
     && echo "✓ Core Python dependencies installed" \
     # Verify imports and check versions
     && python3 -c "import torch; print(f'✓ PyTorch version: {torch.__version__}')" \
     && python3 -c "import torch; print(f'✓ PyTorch CUDA version: {torch.version.cuda}')" \
     && python3 -c "import torchao; print(f'✓ torchao version: {torchao.__version__}')" \
     && python3 -c "import transformers; print(f'✓ Transformers version: {transformers.__version__}')" \
-    # Skip torchaudio verification during build to avoid halting if there are issues
-    && (python3 -c "import torchaudio; print(f'✓ Torchaudio version: {torchaudio.__version__}')" || echo "⚠️ Warning: Torchaudio import failed, will address in testing phase")
+    # Verify torchaudio import again after potential install
+    && (python3 -c "import torchaudio; print(f'✓ Torchaudio version: {torchaudio.__version__}')" || echo "⚠️ Warning: Torchaudio import failed after install attempt")
 
 # Install CSM additional dependencies (with fallbacks for packages that might fail)
 RUN pip3 install --no-cache-dir einops && \
@@ -91,16 +95,9 @@ RUN pip3 install --no-cache-dir einops && \
     pip3 install --no-cache-dir datasets && \
     echo "✓ Installed datasets: $(pip show datasets | grep Version)" || echo "Warning: Failed to install datasets"
 
-# Add an explicit installation attempt for both torchaudio and required libraries
-# This is needed because of potential compatibility issues with the PyTorch version
-RUN pip3 install --no-cache-dir torchaudio==2.6.0 && \
-    echo "✓ Installed torchaudio successfully" || \
-    (echo "⚠️ Warning: First torchaudio install attempt failed, trying with build tools" && \
-     apt-get update && \
-     apt-get install -y --no-install-recommends build-essential libsndfile1-dev && \
-     pip3 install --no-cache-dir torchaudio==2.6.0 && \
-     echo "✓ Installed torchaudio with build tools" || \
-     echo "⚠️ Warning: Could not install torchaudio, CSM testing might be limited")
+# Remove the redundant torchaudio installation block below
+# RUN pip3 install --no-cache-dir torchaudio==2.6.0 && \
+#    ... (removed) ...
 
 # torchao is included in the base image - no manual installation needed
 
@@ -158,6 +155,7 @@ RUN chmod +x /usr/local/bin/entrypoint.sh && \
 WORKDIR ${AUDIOBOOK_DATA}
 
 # Add health check to ensure container is functioning properly
+# Remove moshi and triton checks
 HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
     CMD python3 -c "import torch, torchaudio, torchao, csm; print('Health check passed.')" || exit 1
 

commit fc5428ec002d94dcc4e479ac4d987d56a395ae0a
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 11:16:49 2025 -0700

    add cmake, libopus-dev

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index d2ba3a0..02c6347 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -27,11 +27,14 @@ ENV PYTHONUNBUFFERED=1 \
     PIP_INDEX_URL=https://pypi.jetson-ai-lab.dev/jp6/cu128
 
 # Install system dependencies (git, wget, curl, unzip already in base)
-# Add ffmpeg, libsndfile1, python3-pip
+# Add ffmpeg, libsndfile1, python3-pip, cmake, libopus-dev
 RUN apt-get update && apt-get install -y --no-install-recommends \
     ffmpeg \
     libsndfile1 \
     python3-pip \
+    # Add cmake and libopus-dev for building dependencies like sphn (via audiopus_sys)
+    cmake \
+    libopus-dev \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/* \
     && echo "✓ System dependencies installed"
@@ -66,6 +69,9 @@ RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     nltk \
     # Install torchaudio with a version that matches PyTorch 2.6.0
     torchaudio==2.6.0 \
+    # Add moshi and triton
+    moshi \
+    triton \
     && echo "✓ Core Python dependencies installed" \
     # Verify imports and check versions
     && python3 -c "import torch; print(f'✓ PyTorch version: {torch.__version__}')" \

commit 65b318a9ba3c03169967e84d4d164df89ac68b72
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 10:07:00 2025 -0700

    base image provides PyTorch 2.6.0, we're explicitly requesting torchaudio 2.6.0.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index c0f9d18..d2ba3a0 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -64,14 +64,16 @@ RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     PyPDF2 \
     pdfminer.six \
     nltk \
-    # Install torchaudio explicitly - will use the custom pip server
-    torchaudio \
+    # Install torchaudio with a version that matches PyTorch 2.6.0
+    torchaudio==2.6.0 \
     && echo "✓ Core Python dependencies installed" \
     # Verify imports and check versions
     && python3 -c "import torch; print(f'✓ PyTorch version: {torch.__version__}')" \
-    && python3 -c "import torchaudio; print(f'✓ Torchaudio version: {torchaudio.__version__}')" \
+    && python3 -c "import torch; print(f'✓ PyTorch CUDA version: {torch.version.cuda}')" \
     && python3 -c "import torchao; print(f'✓ torchao version: {torchao.__version__}')" \
-    && python3 -c "import transformers; print(f'✓ Transformers version: {transformers.__version__}')"
+    && python3 -c "import transformers; print(f'✓ Transformers version: {transformers.__version__}')" \
+    # Skip torchaudio verification during build to avoid halting if there are issues
+    && (python3 -c "import torchaudio; print(f'✓ Torchaudio version: {torchaudio.__version__}')" || echo "⚠️ Warning: Torchaudio import failed, will address in testing phase")
 
 # Install CSM additional dependencies (with fallbacks for packages that might fail)
 RUN pip3 install --no-cache-dir einops && \
@@ -83,12 +85,16 @@ RUN pip3 install --no-cache-dir einops && \
     pip3 install --no-cache-dir datasets && \
     echo "✓ Installed datasets: $(pip show datasets | grep Version)" || echo "Warning: Failed to install datasets"
 
-# Install silentcipher (trying PyPI first, then GitHub)
-RUN pip3 install --no-cache-dir silentcipher && \
-    echo "✓ Installed silentcipher from PyPI: $(pip show silentcipher | grep Version)" || \
-    (export GIT_TERMINAL_PROMPT=0 && pip3 install --no-cache-dir git+https://github.com/SesameAILabs/silentcipher.git@master && \
-    echo "✓ Installed silentcipher from GitHub") || \
-    echo "Warning: Failed to install silentcipher. Some watermarking features might not work."
+# Add an explicit installation attempt for both torchaudio and required libraries
+# This is needed because of potential compatibility issues with the PyTorch version
+RUN pip3 install --no-cache-dir torchaudio==2.6.0 && \
+    echo "✓ Installed torchaudio successfully" || \
+    (echo "⚠️ Warning: First torchaudio install attempt failed, trying with build tools" && \
+     apt-get update && \
+     apt-get install -y --no-install-recommends build-essential libsndfile1-dev && \
+     pip3 install --no-cache-dir torchaudio==2.6.0 && \
+     echo "✓ Installed torchaudio with build tools" || \
+     echo "⚠️ Warning: Could not install torchaudio, CSM testing might be limited")
 
 # torchao is included in the base image - no manual installation needed
 
@@ -127,68 +133,10 @@ RUN python3 -c "import nltk; nltk.download('punkt')" && \
 # Create a utilities directory
 RUN mkdir -p /usr/local/bin/utils
 
-# Create a script to test CSM
-RUN echo '#!/usr/bin/env python3\n\
-import os\n\
-import sys\n\
-import logging\n\
-from pathlib import Path\n\
-\n\
-# Configure logging\n\
-logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")\n\
-logger = logging.getLogger("test_csm")\n\
-\n\
-try:\n\
-    import torch\n\
-    import torchaudio\n\
-    import torchao # Verify torchao import\n\
-    # Try multiple import paths for flexibility\n\
-    try:\n\
-        from csm import load_csm_1b, Segment\n\
-        logger.info("Successfully imported from csm package")\n\
-    except ImportError:\n\
-        # Direct import from module path\n\
-        sys.path.insert(0, "/opt/csm")\n\
-        from generator import load_csm_1b, Segment\n\
-        logger.info("Successfully imported directly from generator.py")\n\
-    \n\
-    logger.info("CSM imports successful")\n\
-    \n\
-    # Determine device\n\
-    device = "cuda" if torch.cuda.is_available() else "cpu"\n\
-    logger.info(f"Using device: {device}")\n\
-    \n\
-    # Get model path from argument or use default\n\
-    model_path = sys.argv[1] if len(sys.argv) > 1 else "/models/sesame-csm-1b"\n\
-    \n\
-    # Verify model path exists\n\
-    if not os.path.exists(model_path):\n\
-        logger.error(f"Model path does not exist: {model_path}")\n\
-        sys.exit(1)\n\
-    \n\
-    # Load the model\n\
-    logger.info(f"Loading CSM model from {model_path}...")\n\
-    generator = load_csm_1b(model_path=model_path, device=device)\n\
-    \n\
-    # Generate test audio\n\
-    text = "This is a test of the CSM text to speech system."\n\
-    logger.info(f"Generating speech for: \\"{text}\\"")\n\
-    audio = generator.generate(text=text)\n\
-    \n\
-    # Save the audio\n\
-    output_file = Path("/audiobook_data/test_sample.wav")\n\
-    torchaudio.save(output_file, audio.unsqueeze(0).cpu(), generator.sample_rate)\n\
-    logger.info(f"Test audio saved to {output_file}")\n\
-    \n\
-    logger.info("✅ Test completed successfully!")\n\
-\n\
-except Exception as e:\n\
-    logger.error(f"❌ Error: {e}")\n\
-    import traceback\n\
-    traceback.print_exc()\n\
-    sys.exit(1)\n\
-' > /usr/local/bin/utils/test_csm.py && chmod +x /usr/local/bin/utils/test_csm.py && \
-    echo "✓ Test script created"
+# Copy the test script from the repository
+COPY docker/sesame-tts/utils/test_csm.py /usr/local/bin/utils/
+RUN chmod +x /usr/local/bin/utils/test_csm.py && \
+    echo "✓ Test script copied"
 
 # Verify CUDA is available
 RUN echo "✓ CUDA Availability: $(python3 -c "import torch; print(torch.cuda.is_available())")" && \

commit a8140e6352c1fab621a58edd43ca69e356a99721
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Tue Apr 15 09:43:58 2025 -0700

    follow best practices from the jetson-containers ecosystem while maintaining compatibility with your existing setup.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index fc3d273..c0f9d18 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -3,6 +3,12 @@
 ARG BASE_IMAGE=dustynv/torchao:0.11.0-r36.4.0-cu128-24.04
 FROM ${BASE_IMAGE}
 
+# Add container metadata
+LABEL org.opencontainers.image.description="Sesame CSM text-to-speech for Jetson"
+LABEL org.opencontainers.image.source="https://github.com/SesameAILabs/csm"
+LABEL com.nvidia.jetpack.version="6.1"
+LABEL com.nvidia.cuda.version="12.8"
+
 # This image is based on JetPack 6.1+ (L4T r36.4.x) with Ubuntu 24.04
 
 # Set environment variables
@@ -14,7 +20,11 @@ ENV PYTHONUNBUFFERED=1 \
     DEBIAN_FRONTEND=noninteractive \
     MODELS_DIR=/models \
     AUDIOBOOK_DATA=/audiobook_data \
-    BOOKS_DIR=/books
+    BOOKS_DIR=/books \
+    NVIDIA_VISIBLE_DEVICES=all \
+    NVIDIA_DRIVER_CAPABILITIES=all \
+    # Explicitly set the pip index URL to use the Jetson pip server
+    PIP_INDEX_URL=https://pypi.jetson-ai-lab.dev/jp6/cu128
 
 # Install system dependencies (git, wget, curl, unzip already in base)
 # Add ffmpeg, libsndfile1, python3-pip
@@ -38,7 +48,7 @@ RUN mkdir -p /opt/csm ${AUDIOBOOK_DATA} ${BOOKS_DIR} ${MODELS_DIR} \
     && echo "✓ Directories created"
 
 # Upgrade pip and install core dependencies
-# NOTE: PyTorch, Torchaudio, and torchao are provided by the base image.
+# NOTE: PyTorch and torchao are provided by the base image, but torchaudio is not
 RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     pip3 install --no-cache-dir \
     tokenizers \
@@ -54,7 +64,10 @@ RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     PyPDF2 \
     pdfminer.six \
     nltk \
+    # Install torchaudio explicitly - will use the custom pip server
+    torchaudio \
     && echo "✓ Core Python dependencies installed" \
+    # Verify imports and check versions
     && python3 -c "import torch; print(f'✓ PyTorch version: {torch.__version__}')" \
     && python3 -c "import torchaudio; print(f'✓ Torchaudio version: {torchaudio.__version__}')" \
     && python3 -c "import torchao; print(f'✓ torchao version: {torchao.__version__}')" \
@@ -190,6 +203,10 @@ RUN chmod +x /usr/local/bin/entrypoint.sh && \
 # Set working directory
 WORKDIR ${AUDIOBOOK_DATA}
 
+# Add health check to ensure container is functioning properly
+HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
+    CMD python3 -c "import torch, torchaudio, torchao, csm; print('Health check passed.')" || exit 1
+
 # Print build completion message
 RUN echo "✓ Sesame-TTS container build completed successfully!"
 
@@ -197,4 +214,4 @@ RUN echo "✓ Sesame-TTS container build completed successfully!"
 ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
 
 # Default command
-CMD ["bash"]
+CMD ["bash"]
\ No newline at end of file

commit f781a6801251a3ddc32538ceb66de0197981ffd8
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 23:01:15 2025 -0700

    use the L4T r36.4.0 base image with pre-installed torchao 0.11.0.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 2d3bf00..fc3d273 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -1,7 +1,9 @@
-ARG BASE_IMAGE=dustynv/l4t-pytorch:r36.2.0
+# Use the official torchao image for JetPack 6.1+ (L4T r36.4.0)
+# Includes PyTorch 2.6, CUDA 12.8, torchao 0.11.0
+ARG BASE_IMAGE=dustynv/torchao:0.11.0-r36.4.0-cu128-24.04
 FROM ${BASE_IMAGE}
 
-# This is a base image for JetPack 6.x (L4T r36.x) with Ubuntu 24.04
+# This image is based on JetPack 6.1+ (L4T r36.4.x) with Ubuntu 24.04
 
 # Set environment variables
 ENV PYTHONUNBUFFERED=1 \
@@ -14,38 +16,29 @@ ENV PYTHONUNBUFFERED=1 \
     AUDIOBOOK_DATA=/audiobook_data \
     BOOKS_DIR=/books
 
-# Install system dependencies
-RUN apt-get update && apt-get install -y \
+# Install system dependencies (git, wget, curl, unzip already in base)
+# Add ffmpeg, libsndfile1, python3-pip
+RUN apt-get update && apt-get install -y --no-install-recommends \
     ffmpeg \
     libsndfile1 \
     python3-pip \
-    git \
-    wget \
-    curl \
-    unzip \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/* \
     && echo "✓ System dependencies installed"
 
 # Install Rust/Cargo (needed for some Python dependencies)
+# Rust/Cargo might already be in the base, but installing ensures it's present
 RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
     && echo "✓ Rust installed: $(rustc --version)"
 
-# Install build dependencies needed for torchao/torchtune
-RUN apt-get update && apt-get install -y --no-install-recommends \
-    cmake \
-    ninja-build \
-    && apt-get clean \
-    && rm -rf /var/lib/apt/lists/* \
-    && echo "✓ Build dependencies installed"
+# Build dependencies (cmake, ninja-build) are no longer needed for torchao
 
 # Create necessary directories
 RUN mkdir -p /opt/csm ${AUDIOBOOK_DATA} ${BOOKS_DIR} ${MODELS_DIR} \
     && echo "✓ Directories created"
 
 # Upgrade pip and install core dependencies
-# NOTE: PyTorch and Torchaudio are provided by the dustynv/l4t-pytorch base image.
-# We do not reinstall them here to ensure compatibility with the Jetson platform.
+# NOTE: PyTorch, Torchaudio, and torchao are provided by the base image.
 RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     pip3 install --no-cache-dir \
     tokenizers \
@@ -62,6 +55,9 @@ RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     pdfminer.six \
     nltk \
     && echo "✓ Core Python dependencies installed" \
+    && python3 -c "import torch; print(f'✓ PyTorch version: {torch.__version__}')" \
+    && python3 -c "import torchaudio; print(f'✓ Torchaudio version: {torchaudio.__version__}')" \
+    && python3 -c "import torchao; print(f'✓ torchao version: {torchao.__version__}')" \
     && python3 -c "import transformers; print(f'✓ Transformers version: {transformers.__version__}')"
 
 # Install CSM additional dependencies (with fallbacks for packages that might fail)
@@ -77,29 +73,21 @@ RUN pip3 install --no-cache-dir einops && \
 # Install silentcipher (trying PyPI first, then GitHub)
 RUN pip3 install --no-cache-dir silentcipher && \
     echo "✓ Installed silentcipher from PyPI: $(pip show silentcipher | grep Version)" || \
-    (pip3 install --no-cache-dir git+https://github.com/SesameAILabs/silentcipher.git@master && \
+    (export GIT_TERMINAL_PROMPT=0 && pip3 install --no-cache-dir git+https://github.com/SesameAILabs/silentcipher.git@master && \
     echo "✓ Installed silentcipher from GitHub") || \
     echo "Warning: Failed to install silentcipher. Some watermarking features might not work."
 
-# Install torchao from GitHub source (pinned version v0.2.0)
-# Requires cmake, ninja-build installed previously.
-# Fail build if this step fails to ensure torchtune dependency is met.
-# Use git:// protocol instead of https:// to avoid potential auth issues.
-RUN export GIT_TERMINAL_PROMPT=0 && \
-    git clone git://github.com/pytorch/torchao.git /tmp/torchao && \
-    cd /tmp/torchao && \
-    git checkout v0.2.0 && \
-    pip3 install --no-cache-dir . && \
-    cd / && \
-    rm -rf /tmp/torchao && \
-    echo "✓ Installed torchao v0.2.0 from source"
-
-# Install torchtune from GitHub
+# torchao is included in the base image - no manual installation needed
+
+# Install torchtune (try PyPI first, then GitHub)
 # Fail build if this step fails
-# Use git:// protocol instead of https:// to avoid potential auth issues.
-RUN export GIT_TERMINAL_PROMPT=0 && \
-    pip3 install --no-cache-dir git+git://github.com/pytorch/torchtune.git && \
-    echo "✓ Installed torchtune from GitHub"
+RUN (pip3 install --no-cache-dir torchtune && \
+     echo "✓ Installed torchtune from PyPI: $(pip show torchtune | grep Version)") || \
+    (export GIT_TERMINAL_PROMPT=0 && \
+     pip3 install --no-cache-dir git+https://github.com/pytorch/torchtune.git && \
+     echo "✓ Installed torchtune from GitHub") || \
+    (echo "ERROR: Failed to install torchtune from both PyPI and GitHub." && exit 1)
+
 
 # Download essential CSM files instead of cloning the full repository
 WORKDIR /opt/csm
@@ -114,7 +102,7 @@ __all__ = ["load_csm_1b", "Segment", "Generator"]\n\
 ' > /opt/csm/__init__.py
 
 # Add CSM to Python path directly instead of installing it
-RUN python3 -c "import sys; import distutils.sysconfig; path=distutils.sysconfig.get_python_lib(); print(path)" > /tmp/python_path && \
+RUN python3 -c "import sys; import site; print(site.getsitepackages()[0])" > /tmp/python_path && \
     echo 'import sys; sys.path.append("/opt/csm")' > $(cat /tmp/python_path)/csm_path.pth && \
     rm /tmp/python_path && \
     echo "✓ CSM added to Python path"
@@ -140,6 +128,7 @@ logger = logging.getLogger("test_csm")\n\
 try:\n\
     import torch\n\
     import torchaudio\n\
+    import torchao # Verify torchao import\n\
     # Try multiple import paths for flexibility\n\
     try:\n\
         from csm import load_csm_1b, Segment\n\

commit ec3402d842e7201851acf56d798bca83294975eb
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 22:57:14 2025 -0700

    switching the protocol from https:// to git:// for cloning. This often bypasses HTTPS-specific issues.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 899a820..2d3bf00 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -84,9 +84,9 @@ RUN pip3 install --no-cache-dir silentcipher && \
 # Install torchao from GitHub source (pinned version v0.2.0)
 # Requires cmake, ninja-build installed previously.
 # Fail build if this step fails to ensure torchtune dependency is met.
-# Set GIT_TERMINAL_PROMPT=0 to prevent git asking for credentials non-interactively.
+# Use git:// protocol instead of https:// to avoid potential auth issues.
 RUN export GIT_TERMINAL_PROMPT=0 && \
-    git clone https://github.com/pytorch/torchao.git /tmp/torchao && \
+    git clone git://github.com/pytorch/torchao.git /tmp/torchao && \
     cd /tmp/torchao && \
     git checkout v0.2.0 && \
     pip3 install --no-cache-dir . && \
@@ -96,9 +96,9 @@ RUN export GIT_TERMINAL_PROMPT=0 && \
 
 # Install torchtune from GitHub
 # Fail build if this step fails
-# Set GIT_TERMINAL_PROMPT=0 to prevent git asking for credentials non-interactively.
+# Use git:// protocol instead of https:// to avoid potential auth issues.
 RUN export GIT_TERMINAL_PROMPT=0 && \
-    pip3 install --no-cache-dir git+https://github.com/pytorch/torchtune.git && \
+    pip3 install --no-cache-dir git+git://github.com/pytorch/torchtune.git && \
     echo "✓ Installed torchtune from GitHub"
 
 # Download essential CSM files instead of cloning the full repository

commit e92aed7a68b9206120c0a806dc3baf083c6b313d
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 22:56:09 2025 -0700

    incompatibility with the official torchao container for L4T r36.4.0 and why we build from source for L4T r36.2.0.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index a16ed4b..899a820 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -84,7 +84,9 @@ RUN pip3 install --no-cache-dir silentcipher && \
 # Install torchao from GitHub source (pinned version v0.2.0)
 # Requires cmake, ninja-build installed previously.
 # Fail build if this step fails to ensure torchtune dependency is met.
-RUN git clone https://github.com/pytorch/torchao.git /tmp/torchao && \
+# Set GIT_TERMINAL_PROMPT=0 to prevent git asking for credentials non-interactively.
+RUN export GIT_TERMINAL_PROMPT=0 && \
+    git clone https://github.com/pytorch/torchao.git /tmp/torchao && \
     cd /tmp/torchao && \
     git checkout v0.2.0 && \
     pip3 install --no-cache-dir . && \
@@ -94,7 +96,9 @@ RUN git clone https://github.com/pytorch/torchao.git /tmp/torchao && \
 
 # Install torchtune from GitHub
 # Fail build if this step fails
-RUN pip3 install --no-cache-dir git+https://github.com/pytorch/torchtune.git && \
+# Set GIT_TERMINAL_PROMPT=0 to prevent git asking for credentials non-interactively.
+RUN export GIT_TERMINAL_PROMPT=0 && \
+    pip3 install --no-cache-dir git+https://github.com/pytorch/torchtune.git && \
     echo "✓ Installed torchtune from GitHub"
 
 # Download essential CSM files instead of cloning the full repository

commit 932de30b9cefeb531839539f352938d306c7759f
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 22:42:26 2025 -0700

    Add build dependencies (cmake, ninja-build) and install torchao by cloning the repository and building from source.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 9be7732..a16ed4b 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -31,6 +31,14 @@ RUN apt-get update && apt-get install -y \
 RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
     && echo "✓ Rust installed: $(rustc --version)"
 
+# Install build dependencies needed for torchao/torchtune
+RUN apt-get update && apt-get install -y --no-install-recommends \
+    cmake \
+    ninja-build \
+    && apt-get clean \
+    && rm -rf /var/lib/apt/lists/* \
+    && echo "✓ Build dependencies installed"
+
 # Create necessary directories
 RUN mkdir -p /opt/csm ${AUDIOBOOK_DATA} ${BOOKS_DIR} ${MODELS_DIR} \
     && echo "✓ Directories created"
@@ -73,15 +81,21 @@ RUN pip3 install --no-cache-dir silentcipher && \
     echo "✓ Installed silentcipher from GitHub") || \
     echo "Warning: Failed to install silentcipher. Some watermarking features might not work."
 
-# Install torchao and torchtune from GitHub
-# Pin torchao to v0.2.0 due to potential incompatibility with base image PyTorch
-# (AttributeError: type object 'torch._C.Tag' has no attribute 'needs_fixed_stride_order')
-RUN (pip3 install --no-cache-dir git+https://github.com/pytorch/torchao.git@v0.2.0 && \
-    echo "✓ Installed torchao v0.2.0 from GitHub") || \
-    echo "Warning: Failed to install torchao." && \
-    (pip3 install --no-cache-dir git+https://github.com/pytorch/torchtune.git && \
-    echo "✓ Installed torchtune from GitHub") || \
-    echo "Warning: Failed to install torchtune. Some models might not work."
+# Install torchao from GitHub source (pinned version v0.2.0)
+# Requires cmake, ninja-build installed previously.
+# Fail build if this step fails to ensure torchtune dependency is met.
+RUN git clone https://github.com/pytorch/torchao.git /tmp/torchao && \
+    cd /tmp/torchao && \
+    git checkout v0.2.0 && \
+    pip3 install --no-cache-dir . && \
+    cd / && \
+    rm -rf /tmp/torchao && \
+    echo "✓ Installed torchao v0.2.0 from source"
+
+# Install torchtune from GitHub
+# Fail build if this step fails
+RUN pip3 install --no-cache-dir git+https://github.com/pytorch/torchtune.git && \
+    echo "✓ Installed torchtune from GitHub"
 
 # Download essential CSM files instead of cloning the full repository
 WORKDIR /opt/csm

commit 2a51a6d5fa436a86f82b46819e05ad2edc243dff
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 22:37:33 2025 -0700

    Correct the GitHub URL for torchao installation from pytorch/ao.git to pytorch/torchao.git.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 47b42e0..9be7732 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -76,7 +76,7 @@ RUN pip3 install --no-cache-dir silentcipher && \
 # Install torchao and torchtune from GitHub
 # Pin torchao to v0.2.0 due to potential incompatibility with base image PyTorch
 # (AttributeError: type object 'torch._C.Tag' has no attribute 'needs_fixed_stride_order')
-RUN (pip3 install --no-cache-dir git+https://github.com/pytorch/ao.git@v0.2.0 && \
+RUN (pip3 install --no-cache-dir git+https://github.com/pytorch/torchao.git@v0.2.0 && \
     echo "✓ Installed torchao v0.2.0 from GitHub") || \
     echo "Warning: Failed to install torchao." && \
     (pip3 install --no-cache-dir git+https://github.com/pytorch/torchtune.git && \

commit 52c8d6142a61e1de25871a1ba762f64c11d91d2a
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 22:33:27 2025 -0700

    confirming we get torchaudio is in the l4t-pytorch base

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 5ea877b..47b42e0 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -36,7 +36,8 @@ RUN mkdir -p /opt/csm ${AUDIOBOOK_DATA} ${BOOKS_DIR} ${MODELS_DIR} \
     && echo "✓ Directories created"
 
 # Upgrade pip and install core dependencies
-# We use the base image's PyTorch installation instead of reinstalling
+# NOTE: PyTorch and Torchaudio are provided by the dustynv/l4t-pytorch base image.
+# We do not reinstall them here to ensure compatibility with the Jetson platform.
 RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     pip3 install --no-cache-dir \
     tokenizers \

commit 877e4298ecbb9237c0d7f835f826b32ea29069d1
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 22:29:36 2025 -0700

    nstall a specific, potentially older, tagged version of torchao that might be compatible.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index f8a843a..5ea877b 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -73,8 +73,10 @@ RUN pip3 install --no-cache-dir silentcipher && \
     echo "Warning: Failed to install silentcipher. Some watermarking features might not work."
 
 # Install torchao and torchtune from GitHub
-RUN (pip3 install --no-cache-dir git+https://github.com/pytorch/ao.git && \
-    echo "✓ Installed torchao from GitHub") || \
+# Pin torchao to v0.2.0 due to potential incompatibility with base image PyTorch
+# (AttributeError: type object 'torch._C.Tag' has no attribute 'needs_fixed_stride_order')
+RUN (pip3 install --no-cache-dir git+https://github.com/pytorch/ao.git@v0.2.0 && \
+    echo "✓ Installed torchao v0.2.0 from GitHub") || \
     echo "Warning: Failed to install torchao." && \
     (pip3 install --no-cache-dir git+https://github.com/pytorch/torchtune.git && \
     echo "✓ Installed torchtune from GitHub") || \

commit b379c949c980fd8e35b1ba333e5f13a09a784037
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 22:25:19 2025 -0700

    install torchao first, followed by torchtune, both from their GitHub repositories.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index a9e3007..f8a843a 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -72,8 +72,11 @@ RUN pip3 install --no-cache-dir silentcipher && \
     echo "✓ Installed silentcipher from GitHub") || \
     echo "Warning: Failed to install silentcipher. Some watermarking features might not work."
 
-# Install torchtune (Force install from GitHub)
-RUN (pip3 install --no-cache-dir git+https://github.com/pytorch/torchtune.git && \
+# Install torchao and torchtune from GitHub
+RUN (pip3 install --no-cache-dir git+https://github.com/pytorch/ao.git && \
+    echo "✓ Installed torchao from GitHub") || \
+    echo "Warning: Failed to install torchao." && \
+    (pip3 install --no-cache-dir git+https://github.com/pytorch/torchtune.git && \
     echo "✓ Installed torchtune from GitHub") || \
     echo "Warning: Failed to install torchtune. Some models might not work."
 

commit 40ae6b1a44f5b9c399e6c8e8de3f58d64bf874af
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 22:21:06 2025 -0700

    torchtune is now being installed directly from GitHub.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 7fda0b6..a9e3007 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -72,10 +72,8 @@ RUN pip3 install --no-cache-dir silentcipher && \
     echo "✓ Installed silentcipher from GitHub") || \
     echo "Warning: Failed to install silentcipher. Some watermarking features might not work."
 
-# Install torchtune (will attempt to install torchao dependency)
-RUN pip3 install --no-cache-dir torchtune && \
-    echo "✓ Installed torchtune from PyPI: $(pip show torchtune | grep Version)" || \
-    (pip3 install --no-cache-dir git+https://github.com/pytorch/torchtune.git && \
+# Install torchtune (Force install from GitHub)
+RUN (pip3 install --no-cache-dir git+https://github.com/pytorch/torchtune.git && \
     echo "✓ Installed torchtune from GitHub") || \
     echo "Warning: Failed to install torchtune. Some models might not work."
 

commit 07bd357d92bd97ec96cd9b2e708486b412965b65
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 22:19:07 2025 -0700

    Update Section 4.4 to remove the mention of explicit torchao installation and state that torchtune installation handles the dependency.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index c3ce41e..7fda0b6 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -72,15 +72,10 @@ RUN pip3 install --no-cache-dir silentcipher && \
     echo "✓ Installed silentcipher from GitHub") || \
     echo "Warning: Failed to install silentcipher. Some watermarking features might not work."
 
-# Install torchao (dependency for torchtune) - Pin to a potentially compatible version
-RUN pip3 install --no-cache-dir torchao==0.1.0 && \
-    echo "✓ Installed torchao==0.1.0 from PyPI: $(pip show torchao | grep Version)" || \
-    echo "Warning: Failed to install torchao 0.1.0. Torchtune might not work correctly."
-
-# Install torchtune
+# Install torchtune (will attempt to install torchao dependency)
 RUN pip3 install --no-cache-dir torchtune && \
     echo "✓ Installed torchtune from PyPI: $(pip show torchtune | grep Version)" || \
-    (pip3 install --no-cache-dir git+https://github.com/SesameAILabs/torchtune.git && \
+    (pip3 install --no-cache-dir git+https://github.com/pytorch/torchtune.git && \
     echo "✓ Installed torchtune from GitHub") || \
     echo "Warning: Failed to install torchtune. Some models might not work."
 

commit 37880c5f3e5da07a898f7efe35df2927dba03fa0
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 22:16:41 2025 -0700

    Modify the torchao installation step to install version 0.1.0 from PyPI instead of the GitHub repository.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 5a1e7ea..c3ce41e 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -72,10 +72,10 @@ RUN pip3 install --no-cache-dir silentcipher && \
     echo "✓ Installed silentcipher from GitHub") || \
     echo "Warning: Failed to install silentcipher. Some watermarking features might not work."
 
-# Install torchao (dependency for torchtune)
-RUN pip3 install --no-cache-dir git+https://github.com/pytorch/ao.git && \
-    echo "✓ Installed torchao from GitHub: $(pip show torchao | grep Version)" || \
-    echo "Warning: Failed to install torchao. Torchtune might not work correctly."
+# Install torchao (dependency for torchtune) - Pin to a potentially compatible version
+RUN pip3 install --no-cache-dir torchao==0.1.0 && \
+    echo "✓ Installed torchao==0.1.0 from PyPI: $(pip show torchao | grep Version)" || \
+    echo "Warning: Failed to install torchao 0.1.0. Torchtune might not work correctly."
 
 # Install torchtune
 RUN pip3 install --no-cache-dir torchtune && \

commit 2cfc456f2c673a699a62befed105ad9065e62133
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 22:13:27 2025 -0700

     install torchao before installing torchtune.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index c58ba19..5a1e7ea 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -72,6 +72,11 @@ RUN pip3 install --no-cache-dir silentcipher && \
     echo "✓ Installed silentcipher from GitHub") || \
     echo "Warning: Failed to install silentcipher. Some watermarking features might not work."
 
+# Install torchao (dependency for torchtune)
+RUN pip3 install --no-cache-dir git+https://github.com/pytorch/ao.git && \
+    echo "✓ Installed torchao from GitHub: $(pip show torchao | grep Version)" || \
+    echo "Warning: Failed to install torchao. Torchtune might not work correctly."
+
 # Install torchtune
 RUN pip3 install --no-cache-dir torchtune && \
     echo "✓ Installed torchtune from PyPI: $(pip show torchtune | grep Version)" || \

commit b0796449f260ded6c7f6fe5cb09af29f2e63a507
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 22:09:10 2025 -0700

    remove the problematic PyTorch/Torchaudio reinstallation step and the unnecessary LD_LIBRARY_PATH setting.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index da366a0..c58ba19 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -55,17 +55,6 @@ RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     && echo "✓ Core Python dependencies installed" \
     && python3 -c "import transformers; print(f'✓ Transformers version: {transformers.__version__}')"
 
-# Add the PyTorch upgrade here:
-# Upgrade to newer PyTorch for Jetson
-RUN pip3 uninstall -y torch torchvision torchaudio && \
-    wget https://developer.download.nvidia.com/compute/redist/jp/v61/pytorch/torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl && \
-    pip3 install torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl && \
-    rm torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl && \
-    echo "✓ PyTorch upgraded: $(pip show torch | grep Version)" && \
-    # Install compatible torchaudio
-    pip3 install --no-cache-dir torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cu121 && \
-    echo "✓ Torchaudio installed: $(pip show torchaudio | grep Version)"
-
 # Install CSM additional dependencies (with fallbacks for packages that might fail)
 RUN pip3 install --no-cache-dir einops && \
     echo "✓ Installed einops: $(pip show einops | grep Version)" || echo "Warning: Failed to install einops" && \

commit 7bce6f7a17de1c3e3af64dddf6f4a645f2bc926d
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 21:59:57 2025 -0700

    torchaudio Dockerfile

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index f941566..da366a0 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -61,7 +61,10 @@ RUN pip3 uninstall -y torch torchvision torchaudio && \
     wget https://developer.download.nvidia.com/compute/redist/jp/v61/pytorch/torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl && \
     pip3 install torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl && \
     rm torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl && \
-    echo "✓ PyTorch upgraded: $(pip show torch | grep Version)"
+    echo "✓ PyTorch upgraded: $(pip show torch | grep Version)" && \
+    # Install compatible torchaudio
+    pip3 install --no-cache-dir torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cu121 && \
+    echo "✓ Torchaudio installed: $(pip show torchaudio | grep Version)"
 
 # Install CSM additional dependencies (with fallbacks for packages that might fail)
 RUN pip3 install --no-cache-dir einops && \
@@ -156,7 +159,7 @@ try:\n\
     \n\
     # Generate test audio\n\
     text = "This is a test of the CSM text to speech system."\n\
-    logger.info(f"Generating speech for: \"{text}\"")\n\
+    logger.info(f"Generating speech for: \\"{text}\\"")\n\
     audio = generator.generate(text=text)\n\
     \n\
     # Save the audio\n\

commit 9e7b0a09c0bb4093eeb759d659b7af54ae0e0aa7
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 21:00:40 2025 -0700

    pytorch 36.2.0

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index f4853c1..f941566 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -1,4 +1,4 @@
-ARG BASE_IMAGE=dustynv/l4t-pytorch:r36.2
+ARG BASE_IMAGE=dustynv/l4t-pytorch:r36.2.0
 FROM ${BASE_IMAGE}
 
 # This is a base image for JetPack 6.x (L4T r36.x) with Ubuntu 24.04

commit 61e072e2d2d0d68f6770b840fc412f34326af96b
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 19:49:25 2025 -0700

    more robust, easier to maintain, and better integrated with the Jetson hardware acceleration capabilities.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 6d37b07..f4853c1 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -1,4 +1,5 @@
-FROM dustynv/l4t-pytorch:r36.4.0-cu128-24.04
+ARG BASE_IMAGE=dustynv/l4t-pytorch:r36.2
+FROM ${BASE_IMAGE}
 
 # This is a base image for JetPack 6.x (L4T r36.x) with Ubuntu 24.04
 
@@ -8,7 +9,10 @@ ENV PYTHONUNBUFFERED=1 \
     PIP_DISABLE_PIP_VERSION_CHECK=1 \
     NO_TORCH_COMPILE=1 \
     PATH="/root/.cargo/bin:${PATH}" \
-    DEBIAN_FRONTEND=noninteractive
+    DEBIAN_FRONTEND=noninteractive \
+    MODELS_DIR=/models \
+    AUDIOBOOK_DATA=/audiobook_data \
+    BOOKS_DIR=/books
 
 # Install system dependencies
 RUN apt-get update && apt-get install -y \
@@ -20,13 +24,16 @@ RUN apt-get update && apt-get install -y \
     curl \
     unzip \
     && apt-get clean \
-    && rm -rf /var/lib/apt/lists/*
+    && rm -rf /var/lib/apt/lists/* \
+    && echo "✓ System dependencies installed"
 
 # Install Rust/Cargo (needed for some Python dependencies)
-RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
+RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
+    && echo "✓ Rust installed: $(rustc --version)"
 
 # Create necessary directories
-RUN mkdir -p /opt/csm /audiobook_data /books /models
+RUN mkdir -p /opt/csm ${AUDIOBOOK_DATA} ${BOOKS_DIR} ${MODELS_DIR} \
+    && echo "✓ Directories created"
 
 # Upgrade pip and install core dependencies
 # We use the base image's PyTorch installation instead of reinstalling
@@ -44,40 +51,47 @@ RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     beautifulsoup4 \
     PyPDF2 \
     pdfminer.six \
-    nltk
+    nltk \
+    && echo "✓ Core Python dependencies installed" \
+    && python3 -c "import transformers; print(f'✓ Transformers version: {transformers.__version__}')"
 
 # Add the PyTorch upgrade here:
 # Upgrade to newer PyTorch for Jetson
 RUN pip3 uninstall -y torch torchvision torchaudio && \
     wget https://developer.download.nvidia.com/compute/redist/jp/v61/pytorch/torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl && \
     pip3 install torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl && \
-    rm torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl
-
-# Alternative approach: Use the jetson-containers project
-# See: https://github.com/dusty-nv/jetson-containers
-# Build with: jetson-containers build pytorch:2.6
-# Run with: jetson-containers run dustynv/pytorch:2.6-r36.4.0-cu128-24.04
+    rm torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl && \
+    echo "✓ PyTorch upgraded: $(pip show torch | grep Version)"
 
 # Install CSM additional dependencies (with fallbacks for packages that might fail)
-RUN pip3 install --no-cache-dir einops || echo "Warning: Failed to install einops" && \
-    pip3 install --no-cache-dir rotary_embedding_torch || echo "Warning: Failed to install rotary_embedding_torch" && \
-    pip3 install --no-cache-dir vector_quantize_pytorch || echo "Warning: Failed to install vector_quantize_pytorch" && \
-    pip3 install --no-cache-dir datasets || echo "Warning: Failed to install datasets"
+RUN pip3 install --no-cache-dir einops && \
+    echo "✓ Installed einops: $(pip show einops | grep Version)" || echo "Warning: Failed to install einops" && \
+    pip3 install --no-cache-dir rotary_embedding_torch && \
+    echo "✓ Installed rotary_embedding_torch: $(pip show rotary_embedding_torch | grep Version)" || echo "Warning: Failed to install rotary_embedding_torch" && \
+    pip3 install --no-cache-dir vector_quantize_pytorch && \
+    echo "✓ Installed vector_quantize_pytorch: $(pip show vector_quantize_pytorch | grep Version)" || echo "Warning: Failed to install vector_quantize_pytorch" && \
+    pip3 install --no-cache-dir datasets && \
+    echo "✓ Installed datasets: $(pip show datasets | grep Version)" || echo "Warning: Failed to install datasets"
 
 # Install silentcipher (trying PyPI first, then GitHub)
-RUN pip3 install --no-cache-dir silentcipher || \
-    pip3 install --no-cache-dir git+https://github.com/SesameAILabs/silentcipher.git@master || \
+RUN pip3 install --no-cache-dir silentcipher && \
+    echo "✓ Installed silentcipher from PyPI: $(pip show silentcipher | grep Version)" || \
+    (pip3 install --no-cache-dir git+https://github.com/SesameAILabs/silentcipher.git@master && \
+    echo "✓ Installed silentcipher from GitHub") || \
     echo "Warning: Failed to install silentcipher. Some watermarking features might not work."
 
-# Add after the other pip install commands
-RUN pip3 install --no-cache-dir torchtune || \
-    pip3 install --no-cache-dir git+https://github.com/SesameAILabs/torchtune.git || \
+# Install torchtune
+RUN pip3 install --no-cache-dir torchtune && \
+    echo "✓ Installed torchtune from PyPI: $(pip show torchtune | grep Version)" || \
+    (pip3 install --no-cache-dir git+https://github.com/SesameAILabs/torchtune.git && \
+    echo "✓ Installed torchtune from GitHub") || \
     echo "Warning: Failed to install torchtune. Some models might not work."
 
 # Download essential CSM files instead of cloning the full repository
 WORKDIR /opt/csm
 RUN wget -q https://raw.githubusercontent.com/SesameAILabs/csm/main/generator.py && \
-    wget -q https://raw.githubusercontent.com/SesameAILabs/csm/main/models.py 
+    wget -q https://raw.githubusercontent.com/SesameAILabs/csm/main/models.py && \
+    echo "✓ CSM files downloaded"
 
 # Create simple Python module to make imports work
 RUN echo '# CSM package\n\
@@ -88,10 +102,12 @@ __all__ = ["load_csm_1b", "Segment", "Generator"]\n\
 # Add CSM to Python path directly instead of installing it
 RUN python3 -c "import sys; import distutils.sysconfig; path=distutils.sysconfig.get_python_lib(); print(path)" > /tmp/python_path && \
     echo 'import sys; sys.path.append("/opt/csm")' > $(cat /tmp/python_path)/csm_path.pth && \
-    rm /tmp/python_path
+    rm /tmp/python_path && \
+    echo "✓ CSM added to Python path"
 
 # Download NLTK data
-RUN python3 -c "import nltk; nltk.download('punkt')"
+RUN python3 -c "import nltk; nltk.download('punkt')" && \
+    echo "✓ NLTK punkt downloaded"
 
 # Create a utilities directory
 RUN mkdir -p /usr/local/bin/utils
@@ -155,14 +171,24 @@ except Exception as e:\n\
     import traceback\n\
     traceback.print_exc()\n\
     sys.exit(1)\n\
-' > /usr/local/bin/utils/test_csm.py && chmod +x /usr/local/bin/utils/test_csm.py
+' > /usr/local/bin/utils/test_csm.py && chmod +x /usr/local/bin/utils/test_csm.py && \
+    echo "✓ Test script created"
+
+# Verify CUDA is available
+RUN echo "✓ CUDA Availability: $(python3 -c "import torch; print(torch.cuda.is_available())")" && \
+    echo "✓ CUDA Version: $(python3 -c "import torch; print(torch.version.cuda if torch.cuda.is_available() else 'Not available')")" && \
+    echo "✓ Device Count: $(python3 -c "import torch; print(torch.cuda.device_count())")"
 
 # Copy the entrypoint script
 COPY docker/sesame-tts/entrypoint.sh /usr/local/bin/entrypoint.sh
-RUN chmod +x /usr/local/bin/entrypoint.sh
+RUN chmod +x /usr/local/bin/entrypoint.sh && \
+    echo "✓ Entrypoint script installed"
 
 # Set working directory
-WORKDIR /audiobook_data
+WORKDIR ${AUDIOBOOK_DATA}
+
+# Print build completion message
+RUN echo "✓ Sesame-TTS container build completed successfully!"
 
 # Set entrypoint
 ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

commit 23ae9258d7a7025245c466fd4e2723b75d72987b
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Mon Apr 14 13:36:37 2025 -0700

    pytorch support

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 7ddf53d..6d37b07 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -1,4 +1,6 @@
-FROM dustynv/l4t-pytorch:r35.4.1
+FROM dustynv/l4t-pytorch:r36.4.0-cu128-24.04
+
+# This is a base image for JetPack 6.x (L4T r36.x) with Ubuntu 24.04
 
 # Set environment variables
 ENV PYTHONUNBUFFERED=1 \
@@ -47,9 +49,14 @@ RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
 # Add the PyTorch upgrade here:
 # Upgrade to newer PyTorch for Jetson
 RUN pip3 uninstall -y torch torchvision torchaudio && \
-    wget https://developer.download.nvidia.com/compute/redist/jp/v511/pytorch/torch-2.2.0a0+81ea7a4-cp38-cp38-linux_aarch64.whl && \
-    pip3 install torch-2.2.0a0+81ea7a4-cp38-cp38-linux_aarch64.whl && \
-    rm torch-2.2.0a0+81ea7a4-cp38-cp38-linux_aarch64.whl
+    wget https://developer.download.nvidia.com/compute/redist/jp/v61/pytorch/torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl && \
+    pip3 install torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl && \
+    rm torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl
+
+# Alternative approach: Use the jetson-containers project
+# See: https://github.com/dusty-nv/jetson-containers
+# Build with: jetson-containers build pytorch:2.6
+# Run with: jetson-containers run dustynv/pytorch:2.6-r36.4.0-cu128-24.04
 
 # Install CSM additional dependencies (with fallbacks for packages that might fail)
 RUN pip3 install --no-cache-dir einops || echo "Warning: Failed to install einops" && \
@@ -79,7 +86,9 @@ __all__ = ["load_csm_1b", "Segment", "Generator"]\n\
 ' > /opt/csm/__init__.py
 
 # Add CSM to Python path directly instead of installing it
-RUN echo 'import sys; sys.path.append("/opt/csm")' > /usr/local/lib/python3.8/dist-packages/csm_path.pth
+RUN python3 -c "import sys; import distutils.sysconfig; path=distutils.sysconfig.get_python_lib(); print(path)" > /tmp/python_path && \
+    echo 'import sys; sys.path.append("/opt/csm")' > $(cat /tmp/python_path)/csm_path.pth && \
+    rm /tmp/python_path
 
 # Download NLTK data
 RUN python3 -c "import nltk; nltk.download('punkt')"

commit f129a32fb59053e30c774d6a4e86f7de3af9b40f
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sun Apr 13 21:55:09 2025 -0700

    Add pytorch 2.2 whl

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 410e776..7ddf53d 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -44,6 +44,13 @@ RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     pdfminer.six \
     nltk
 
+# Add the PyTorch upgrade here:
+# Upgrade to newer PyTorch for Jetson
+RUN pip3 uninstall -y torch torchvision torchaudio && \
+    wget https://developer.download.nvidia.com/compute/redist/jp/v511/pytorch/torch-2.2.0a0+81ea7a4-cp38-cp38-linux_aarch64.whl && \
+    pip3 install torch-2.2.0a0+81ea7a4-cp38-cp38-linux_aarch64.whl && \
+    rm torch-2.2.0a0+81ea7a4-cp38-cp38-linux_aarch64.whl
+
 # Install CSM additional dependencies (with fallbacks for packages that might fail)
 RUN pip3 install --no-cache-dir einops || echo "Warning: Failed to install einops" && \
     pip3 install --no-cache-dir rotary_embedding_torch || echo "Warning: Failed to install rotary_embedding_torch" && \

commit b2011ce714c853c7e8af1816094cb354a7ad0388
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sun Apr 13 21:45:37 2025 -0700

    add torchtune

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 5b88c18..410e776 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -55,6 +55,11 @@ RUN pip3 install --no-cache-dir silentcipher || \
     pip3 install --no-cache-dir git+https://github.com/SesameAILabs/silentcipher.git@master || \
     echo "Warning: Failed to install silentcipher. Some watermarking features might not work."
 
+# Add after the other pip install commands
+RUN pip3 install --no-cache-dir torchtune || \
+    pip3 install --no-cache-dir git+https://github.com/SesameAILabs/torchtune.git || \
+    echo "Warning: Failed to install torchtune. Some models might not work."
+
 # Download essential CSM files instead of cloning the full repository
 WORKDIR /opt/csm
 RUN wget -q https://raw.githubusercontent.com/SesameAILabs/csm/main/generator.py && \

commit 5abd8c2fefa8481c7de051252090aac42440375c
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sun Apr 13 21:00:25 2025 -0700

    simpler entrypoint script that doesn't use backslashes

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index e14a6c4..5b88c18 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -136,32 +136,8 @@ except Exception as e:\n\
     sys.exit(1)\n\
 ' > /usr/local/bin/utils/test_csm.py && chmod +x /usr/local/bin/utils/test_csm.py
 
-# Create the entrypoint script using separate RUN commands for each line
-RUN echo '#!/bin/bash' > /usr/local/bin/entrypoint.sh
-RUN echo '' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "=================================================="' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "Sesame CSM Audiobook Generator for Jetson"' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "=================================================="' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo ""' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "Available commands:"' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo ""' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "  • Test CSM installation:"' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "    python /usr/local/bin/utils/test_csm.py /models/sesame-csm-1b"' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo ""' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "  • Generate audiobook:"' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "    python /books/generate_audiobook_sesame.py \\"' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "      --input /books/your_book.epub \\"' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "      --output /audiobook_data/audiobook.mp3 \\"' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "      --model_path /models/sesame-csm-1b"' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo ""' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "Volume mounts:"' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "  • /models/sesame-csm-1b: Model files"' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "  • /books: Source books"' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "  • /audiobook_data: Output directory"' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo ""' >> /usr/local/bin/entrypoint.sh
-RUN echo 'echo "=================================================="' >> /usr/local/bin/entrypoint.sh
-RUN echo '' >> /usr/local/bin/entrypoint.sh
-RUN echo 'exec "$@"' >> /usr/local/bin/entrypoint.sh
+# Copy the entrypoint script
+COPY docker/sesame-tts/entrypoint.sh /usr/local/bin/entrypoint.sh
 RUN chmod +x /usr/local/bin/entrypoint.sh
 
 # Set working directory
@@ -171,4 +147,4 @@ WORKDIR /audiobook_data
 ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
 
 # Default command
-CMD ["bash"]
\ No newline at end of file
+CMD ["bash"]

commit 156c3d827db143bffdd00566ab0e7bc719fea553
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sun Apr 13 20:54:19 2025 -0700

    separate RUN commands for each line of the entrypoint script

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 4d15061..e14a6c4 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -136,32 +136,33 @@ except Exception as e:\n\
     sys.exit(1)\n\
 ' > /usr/local/bin/utils/test_csm.py && chmod +x /usr/local/bin/utils/test_csm.py
 
-# Create the entrypoint script directly as a file
-RUN echo '#!/bin/bash
-
-echo "=================================================="
-echo "Sesame CSM Audiobook Generator for Jetson"
-echo "=================================================="
-echo ""
-echo "Available commands:"
-echo ""
-echo "  • Test CSM installation:"
-echo "    python /usr/local/bin/utils/test_csm.py /models/sesame-csm-1b"
-echo ""
-echo "  • Generate audiobook:"
-echo "    python /books/generate_audiobook_sesame.py \\
-      --input /books/your_book.epub \\
-      --output /audiobook_data/audiobook.mp3 \\
-      --model_path /models/sesame-csm-1b"
-echo ""
-echo "Volume mounts:"
-echo "  • /models/sesame-csm-1b: Model files"
-echo "  • /books: Source books"
-echo "  • /audiobook_data: Output directory"
-echo ""
-echo "=================================================="
-
-exec "$@"' > /usr/local/bin/entrypoint.sh && chmod +x /usr/local/bin/entrypoint.sh
+# Create the entrypoint script using separate RUN commands for each line
+RUN echo '#!/bin/bash' > /usr/local/bin/entrypoint.sh
+RUN echo '' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "=================================================="' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "Sesame CSM Audiobook Generator for Jetson"' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "=================================================="' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo ""' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "Available commands:"' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo ""' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "  • Test CSM installation:"' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "    python /usr/local/bin/utils/test_csm.py /models/sesame-csm-1b"' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo ""' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "  • Generate audiobook:"' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "    python /books/generate_audiobook_sesame.py \\"' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "      --input /books/your_book.epub \\"' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "      --output /audiobook_data/audiobook.mp3 \\"' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "      --model_path /models/sesame-csm-1b"' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo ""' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "Volume mounts:"' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "  • /models/sesame-csm-1b: Model files"' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "  • /books: Source books"' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "  • /audiobook_data: Output directory"' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo ""' >> /usr/local/bin/entrypoint.sh
+RUN echo 'echo "=================================================="' >> /usr/local/bin/entrypoint.sh
+RUN echo '' >> /usr/local/bin/entrypoint.sh
+RUN echo 'exec "$@"' >> /usr/local/bin/entrypoint.sh
+RUN chmod +x /usr/local/bin/entrypoint.sh
 
 # Set working directory
 WORKDIR /audiobook_data

commit e93f7806f63f23cf12f3a923037681a95c179e3d
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sun Apr 13 15:04:45 2025 -0700

    fix the entrypoint script creation by ensuring proper escaping of quotation marks.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 98311c6..4d15061 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -136,33 +136,32 @@ except Exception as e:\n\
     sys.exit(1)\n\
 ' > /usr/local/bin/utils/test_csm.py && chmod +x /usr/local/bin/utils/test_csm.py
 
-# Create entrypoint script with fixed syntax
-RUN echo '#!/bin/bash\n\
-\n\
-echo "=================================================="\n\
-echo "Sesame CSM Audiobook Generator for Jetson"\n\
-echo "=================================================="\n\
-echo ""\n\
-echo "Available commands:"\n\
-echo ""\n\
-echo "  • Test CSM installation:"\n\
-echo "    python /usr/local/bin/utils/test_csm.py /models/sesame-csm-1b"\n\
-echo ""\n\
-echo "  • Generate audiobook:"\n\
-echo "    python /books/generate_audiobook_sesame.py \\"\n\
-echo "      --input /books/your_book.epub \\"\n\
-echo "      --output /audiobook_data/audiobook.mp3 \\"\n\
-echo "      --model_path /models/sesame-csm-1b"\n\
-echo ""\n\
-echo "Volume mounts:"\n\
-echo "  • /models/sesame-csm-1b: Model files"\n\
-echo "  • /books: Source books"\n\
-echo "  • /audiobook_data: Output directory"\n\
-echo ""\n\
-echo "=================================================="\n\
-\n\
-exec "$@"\n\
-' > /usr/local/bin/entrypoint.sh && chmod +x /usr/local/bin/entrypoint.sh
+# Create the entrypoint script directly as a file
+RUN echo '#!/bin/bash
+
+echo "=================================================="
+echo "Sesame CSM Audiobook Generator for Jetson"
+echo "=================================================="
+echo ""
+echo "Available commands:"
+echo ""
+echo "  • Test CSM installation:"
+echo "    python /usr/local/bin/utils/test_csm.py /models/sesame-csm-1b"
+echo ""
+echo "  • Generate audiobook:"
+echo "    python /books/generate_audiobook_sesame.py \\
+      --input /books/your_book.epub \\
+      --output /audiobook_data/audiobook.mp3 \\
+      --model_path /models/sesame-csm-1b"
+echo ""
+echo "Volume mounts:"
+echo "  • /models/sesame-csm-1b: Model files"
+echo "  • /books: Source books"
+echo "  • /audiobook_data: Output directory"
+echo ""
+echo "=================================================="
+
+exec "$@"' > /usr/local/bin/entrypoint.sh && chmod +x /usr/local/bin/entrypoint.sh
 
 # Set working directory
 WORKDIR /audiobook_data

commit b1b1430f0ed591c5f2ed2bbabe72f103f43db6d4
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sun Apr 13 15:00:55 2025 -0700

    Dockerfile with the corrected entrypoint script

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 4e0620b..98311c6 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -136,7 +136,7 @@ except Exception as e:\n\
     sys.exit(1)\n\
 ' > /usr/local/bin/utils/test_csm.py && chmod +x /usr/local/bin/utils/test_csm.py
 
-# Create entrypoint script
+# Create entrypoint script with fixed syntax
 RUN echo '#!/bin/bash\n\
 \n\
 echo "=================================================="\n\

commit 651137d694f34bc3f544753dd938e2c63e07e26d
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sun Apr 13 14:52:52 2025 -0700

     a new fixed version of the Dockerfile that addresses the error with pip install -e .

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 2fe877b..4e0620b 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -50,18 +50,25 @@ RUN pip3 install --no-cache-dir einops || echo "Warning: Failed to install einop
     pip3 install --no-cache-dir vector_quantize_pytorch || echo "Warning: Failed to install vector_quantize_pytorch" && \
     pip3 install --no-cache-dir datasets || echo "Warning: Failed to install datasets"
 
-# Download essential CSM files instead of cloning the full repository
-WORKDIR /opt/csm
-RUN wget -q https://raw.githubusercontent.com/SesameAILabs/csm/main/generator.py && \
-    wget -q https://raw.githubusercontent.com/SesameAILabs/csm/main/models.py && \
-    touch __init__.py && \
-    echo 'from .generator import load_csm_1b, Segment' > __init__.py
-
 # Install silentcipher (trying PyPI first, then GitHub)
 RUN pip3 install --no-cache-dir silentcipher || \
     pip3 install --no-cache-dir git+https://github.com/SesameAILabs/silentcipher.git@master || \
     echo "Warning: Failed to install silentcipher. Some watermarking features might not work."
 
+# Download essential CSM files instead of cloning the full repository
+WORKDIR /opt/csm
+RUN wget -q https://raw.githubusercontent.com/SesameAILabs/csm/main/generator.py && \
+    wget -q https://raw.githubusercontent.com/SesameAILabs/csm/main/models.py 
+
+# Create simple Python module to make imports work
+RUN echo '# CSM package\n\
+from .generator import load_csm_1b, Segment, Generator\n\
+__all__ = ["load_csm_1b", "Segment", "Generator"]\n\
+' > /opt/csm/__init__.py
+
+# Add CSM to Python path directly instead of installing it
+RUN echo 'import sys; sys.path.append("/opt/csm")' > /usr/local/lib/python3.8/dist-packages/csm_path.pth
+
 # Download NLTK data
 RUN python3 -c "import nltk; nltk.download('punkt')"
 
@@ -79,13 +86,18 @@ from pathlib import Path\n\
 logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")\n\
 logger = logging.getLogger("test_csm")\n\
 \n\
-# Add CSM to path\n\
-sys.path.insert(0, "/opt/csm")\n\
-\n\
 try:\n\
     import torch\n\
     import torchaudio\n\
-    from generator import load_csm_1b, Segment\n\
+    # Try multiple import paths for flexibility\n\
+    try:\n\
+        from csm import load_csm_1b, Segment\n\
+        logger.info("Successfully imported from csm package")\n\
+    except ImportError:\n\
+        # Direct import from module path\n\
+        sys.path.insert(0, "/opt/csm")\n\
+        from generator import load_csm_1b, Segment\n\
+        logger.info("Successfully imported directly from generator.py")\n\
     \n\
     logger.info("CSM imports successful")\n\
     \n\

commit 039a88427b6e0f209c4db8f95d2013289e5bcdaf
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sun Apr 13 14:26:51 2025 -0700

    streamlined Dockerfile specifically designed for the Jetson Orin Nano using the jetson-containers ecosystem

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index bf90ef9..2fe877b 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -3,386 +3,159 @@ FROM dustynv/l4t-pytorch:r35.4.1
 # Set environment variables
 ENV PYTHONUNBUFFERED=1 \
     PYTHONDONTWRITEBYTECODE=1 \
+    PIP_DISABLE_PIP_VERSION_CHECK=1 \
+    NO_TORCH_COMPILE=1 \
     PATH="/root/.cargo/bin:${PATH}" \
-    PIP_DISABLE_PIP_VERSION_CHECK=1
+    DEBIAN_FRONTEND=noninteractive
 
 # Install system dependencies
 RUN apt-get update && apt-get install -y \
     ffmpeg \
     libsndfile1 \
     python3-pip \
-    python3-venv \
     git \
     wget \
+    curl \
     unzip \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/*
 
-# Install Rust/Cargo (required for silentcipher dependency)
-RUN wget -q -O - https://sh.rustup.rs | sh -s -- -y
+# Install Rust/Cargo (needed for some Python dependencies)
+RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
 
-# Disable Triton compilation which can cause issues on Jetson
-ENV NO_TORCH_COMPILE=1
+# Create necessary directories
+RUN mkdir -p /opt/csm /audiobook_data /books /models
 
-# Create directory for CSM code
-RUN mkdir -p /opt/csm
-
-# Install Python dependencies in smaller batches for better error isolation
-RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel
-
-# Install PyTorch and torchaudio (already in the base image)
-RUN pip3 install --no-cache-dir \
-    "torch>=2.0.0,<2.5.0" \
-    "torchaudio>=2.0.0,<2.5.0"
-
-# Install transformers and tokenizers
-RUN pip3 install --no-cache-dir \
-    "tokenizers>=0.13.0,<0.22.0" \
-    "transformers>=4.30.0,<4.47.0" \
-    "huggingface_hub>=0.16.0,<0.29.0"
-
-# Install moshi with fallback
-RUN pip3 install --no-cache-dir "moshi>=0.2.0,<0.3.0" || \
-    pip3 install --no-cache-dir "moshi==0.2.2" || \
-    pip3 install --no-cache-dir "moshi" || \
-    echo "Warning: Could not install moshi package. Continuing without it."
-
-# Install remaining dependencies with individual fallbacks
-RUN pip3 install --no-cache-dir "torchtune>=0.4.0,<0.5.0" || \
-    pip3 install --no-cache-dir "torchtune==0.4.0" || \
-    echo "Warning: Could not install torchtune package. Continuing without it."
-
-RUN pip3 install --no-cache-dir "torchao>=0.9.0,<1.0.0" || \
-    pip3 install --no-cache-dir "torchao==0.9.0" || \
-    echo "Warning: Could not install torchao package. Continuing without it."
-
-# Handle silentcipher - try PyPI first, fall back to git clone if needed
-RUN pip3 install --no-cache-dir silentcipher || \
-    (echo "Warning: Could not install silentcipher from PyPI, attempting GitHub install..." && \
-     mkdir -p /tmp/silentcipher && \
-     cd /tmp/silentcipher && \
-     git init && \
-     git remote add origin https://github.com/SesameAILabs/silentcipher.git && \
-     git fetch --depth 1 origin master && \
-     git checkout FETCH_HEAD && \
-     pip install -e . || echo "Warning: Could not install silentcipher from GitHub. Continuing without it.")
-
-# Install additional dependencies needed for audiobook generation
-# Split into groups for better error isolation
-RUN pip3 install --no-cache-dir \
-    PyPDF2 \
-    pdfminer.six \
-    nltk \
+# Upgrade pip and install core dependencies
+# We use the base image's PyTorch installation instead of reinstalling
+RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
+    pip3 install --no-cache-dir \
+    tokenizers \
+    transformers \
+    huggingface_hub \
+    accelerate \
+    soundfile \
     tqdm \
     pydub \
-    psutil
-
-RUN pip3 install --no-cache-dir \
+    psutil \
     ebooklib \
-    beautifulsoup4
-
-RUN pip3 install --no-cache-dir \
-    einops || echo "Warning: Could not install einops. Continuing without it."
-
-RUN pip3 install --no-cache-dir \
-    rotary_embedding_torch || echo "Warning: Could not install rotary_embedding_torch. Continuing without it."
-
-RUN pip3 install --no-cache-dir \
-    vector_quantize_pytorch || echo "Warning: Could not install vector_quantize_pytorch. Continuing without it."
+    beautifulsoup4 \
+    PyPDF2 \
+    pdfminer.six \
+    nltk
 
-RUN pip3 install --no-cache-dir \
-    accelerate \
-    soundfile \
-    "datasets[audio]" || pip3 install --no-cache-dir datasets
+# Install CSM additional dependencies (with fallbacks for packages that might fail)
+RUN pip3 install --no-cache-dir einops || echo "Warning: Failed to install einops" && \
+    pip3 install --no-cache-dir rotary_embedding_torch || echo "Warning: Failed to install rotary_embedding_torch" && \
+    pip3 install --no-cache-dir vector_quantize_pytorch || echo "Warning: Failed to install vector_quantize_pytorch" && \
+    pip3 install --no-cache-dir datasets || echo "Warning: Failed to install datasets"
 
-# Download key CSM files instead of cloning the whole repo
+# Download essential CSM files instead of cloning the full repository
 WORKDIR /opt/csm
-RUN wget -q https://raw.githubusercontent.com/SesameAILabs/csm/2d720827843b653c4d67bb4445b1c0a4f59e646f/generator.py && \
-    wget -q https://raw.githubusercontent.com/SesameAILabs/csm/2d720827843b653c4d67bb4445b1c0a4f59e646f/models.py && \
-    wget -q https://raw.githubusercontent.com/SesameAILabs/csm/2d720827843b653c4d67bb4445b1c0a4f59e646f/setup.py
-
-# Create an __init__.py file to make the directory a Python package
-RUN touch __init__.py && \
-    echo 'from .generator import load_csm_1b, Segment, Generator' > __init__.py
+RUN wget -q https://raw.githubusercontent.com/SesameAILabs/csm/main/generator.py && \
+    wget -q https://raw.githubusercontent.com/SesameAILabs/csm/main/models.py && \
+    touch __init__.py && \
+    echo 'from .generator import load_csm_1b, Segment' > __init__.py
 
-# Install the package in development mode with minimal files
-WORKDIR /opt/csm
-RUN pip install -e .
+# Install silentcipher (trying PyPI first, then GitHub)
+RUN pip3 install --no-cache-dir silentcipher || \
+    pip3 install --no-cache-dir git+https://github.com/SesameAILabs/silentcipher.git@master || \
+    echo "Warning: Failed to install silentcipher. Some watermarking features might not work."
 
 # Download NLTK data
 RUN python3 -c "import nltk; nltk.download('punkt')"
 
-# Create directories for mounting volumes
-RUN mkdir -p /audiobook_data /books /models
+# Create a utilities directory
+RUN mkdir -p /usr/local/bin/utils
 
-# Create a compatibility module for newer CSM API
-RUN echo '"""\nCompatibility module for CSM API changes\n"""\n\
+# Create a script to test CSM
+RUN echo '#!/usr/bin/env python3\n\
 import os\n\
 import sys\n\
-import torch\n\
 import logging\n\
 from pathlib import Path\n\
 \n\
-# Setup logging\n\
-logging.basicConfig(level=logging.INFO)\n\
-logger = logging.getLogger("csm_compat")\n\
-\n\
-# Add the CSM module path if present\n\
-if os.path.exists("/opt/csm"):\n\
-    sys.path.insert(0, "/opt/csm")\n\
-\n\
-try:\n\
-    # Try to import directly from the downloaded files\n\
-    from generator import load_csm_1b as _original_load_csm_1b, Segment, Generator\n\
-    logger.info("Using direct generator.py imports")\n\
-except ImportError as e:\n\
-    logger.error(f"Failed to import from generator.py: {e}")\n\
-    # Fallback implementation\n\
-    from dataclasses import dataclass\n\
-    import torch\n\
-    \n\
-    @dataclass\n\
-    class Segment:\n\
-        text: str\n\
-        speaker: int = 0\n\
-        audio: torch.Tensor = None\n\
-    \n\
-    class Generator:\n\
-        def __init__(self):\n\
-            self.sample_rate = 24000\n\
-        \n\
-        def generate(self, text, speaker=0, context=None, max_audio_length_ms=10000):\n\
-            logger.error("Placeholder Generator - no real implementation available")\n\
-            # Return empty audio of correct shape\n\
-            return torch.zeros(int(self.sample_rate * max_audio_length_ms / 1000))\n\
-    \n\
-    def _original_load_csm_1b(model_path, device="cuda"):\n\
-        logger.error("Placeholder load_csm_1b - no real implementation available")\n\
-        return Generator()\n\
-\n\
-def load_csm_1b(model_path=None, device="cuda"):\n\
-    """\n\
-    Compatible loader that handles API changes between versions\n\
-    """\n\
-    logger.info(f"Loading CSM model from {model_path} on {device}")\n\
-    \n\
-    try:\n\
-        # Original loading function from generator.py\n\
-        return _original_load_csm_1b(model_path=model_path, device=device)\n\
-        \n\
-    except Exception as e:\n\
-        logger.error(f"Error loading CSM model: {e}")\n\
-        raise\n\
-\n\
-__all__ = ["load_csm_1b", "Segment", "Generator"]\n\
-' > /opt/csm/csm_compat.py
-
-# Create an __init__.py to re-export from the compatibility module
-RUN echo 'from .csm_compat import load_csm_1b, Segment, Generator\n\
-__all__ = ["load_csm_1b", "Segment", "Generator"]\n\
-' > /opt/csm/__init__.py
-
-# Create an optimized script to test CSM
-RUN echo '#!/usr/bin/env python3\n\
-import sys\n\
-import os\n\
-import importlib.util\n\
-from pathlib import Path\n\
-import logging\n\
-\n\
 # Configure logging\n\
-logging.basicConfig(\n\
-    level=logging.INFO,\n\
-    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"\n\
-)\n\
+logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")\n\
 logger = logging.getLogger("test_csm")\n\
 \n\
-# Add CSM root to path\n\
-if os.path.exists("/opt/csm"):\n\
-    sys.path.insert(0, "/opt/csm")\n\
+# Add CSM to path\n\
+sys.path.insert(0, "/opt/csm")\n\
 \n\
 try:\n\
-    # First try to import torch\n\
-    try:\n\
-        import torch\n\
-        logger.info(f"PyTorch version: {torch.__version__}")\n\
-        logger.info(f"CUDA available: {torch.cuda.is_available()}")\n\
-        if torch.cuda.is_available():\n\
-            device = "cuda"\n\
-            logger.info(f"CUDA device: {torch.cuda.get_device_name(0)}")\n\
-        else:\n\
-            device = "cpu"\n\
-            logger.info("CUDA not available, using CPU")\n\
-    except ImportError as e:\n\
-        logger.error(f"Failed to import torch: {e}")\n\
-        device = "cpu"\n\
-\n\
-    # Try to import torchaudio for saving the test file\n\
-    try:\n\
-        import torchaudio\n\
-        logger.info(f"torchaudio version: {torchaudio.__version__}")\n\
-        can_save_audio = True\n\
-    except ImportError as e:\n\
-        logger.warning(f"Failed to import torchaudio: {e}. Won\'t be able to save audio.")\n\
-        can_save_audio = False\n\
-\n\
-    # First try to import from csm package\n\
-    try:\n\
-        # Try the compat module first\n\
-        from csm_compat import load_csm_1b, Segment, Generator\n\
-        logger.info("Successfully imported from csm_compat module")\n\
-    except ImportError:\n\
-        try:\n\
-            # Try importing from generator.py directly\n\
-            from generator import load_csm_1b, Segment\n\
-            logger.info("Successfully imported from generator.py module")\n\
-        except ImportError as e:\n\
-            logger.error(f"Failed to import CSM modules: {e}")\n\
-            logger.error("Cannot proceed without CSM modules")\n\
-            sys.exit(1)\n\
+    import torch\n\
+    import torchaudio\n\
+    from generator import load_csm_1b, Segment\n\
     \n\
-    logger.info(f"\\nUsing device: {device}\\n")\n\
+    logger.info("CSM imports successful")\n\
     \n\
-    # Path to model\n\
+    # Determine device\n\
+    device = "cuda" if torch.cuda.is_available() else "cpu"\n\
+    logger.info(f"Using device: {device}")\n\
+    \n\
+    # Get model path from argument or use default\n\
     model_path = sys.argv[1] if len(sys.argv) > 1 else "/models/sesame-csm-1b"\n\
-    logger.info(f"Loading model from: {model_path}")\n\
     \n\
-    # Check if model exists\n\
+    # Verify model path exists\n\
     if not os.path.exists(model_path):\n\
-        logger.error(f"ERROR: Model path {model_path} does not exist!")\n\
-        logger.error("Make sure you have mounted the model directory correctly.")\n\
-        logger.info("Available paths:")\n\
-        for path in ["/models", "/models/sesame-csm-1b", "/audiobook_data", "/books"]:\n\
-            if os.path.exists(path):\n\
-                logger.info(f"  - {path} (exists, content: {os.listdir(path) if os.path.isdir(path) else \'file\'})")\n\
-            else:\n\
-                logger.info(f"  - {path} (does not exist)")\n\
+        logger.error(f"Model path does not exist: {model_path}")\n\
         sys.exit(1)\n\
     \n\
-    # Load model\n\
-    logger.info("Initializing CSM model...")\n\
-    try:\n\
-        generator = load_csm_1b(model_path=model_path, device=device)\n\
-        logger.info(f"Model loaded successfully. Sample rate: {generator.sample_rate}")\n\
-    except Exception as e:\n\
-        logger.error(f"Error loading model: {e}")\n\
-        import traceback\n\
-        traceback.print_exc()\n\
-        sys.exit(1)\n\
+    # Load the model\n\
+    logger.info(f"Loading CSM model from {model_path}...")\n\
+    generator = load_csm_1b(model_path=model_path, device=device)\n\
     \n\
-    # Test generate a short sample\n\
-    logger.info("\\nGenerating test audio...")\n\
-    output_file = Path("/audiobook_data/test_sample.wav")\n\
-    \n\
-    # Get voice presets if available\n\
-    preset_dir = Path(model_path) / "prompts"\n\
-    presets = list(preset_dir.glob("*.wav")) if preset_dir.exists() else []\n\
-    if presets:\n\
-        logger.info(f"Available voice presets: {[p.stem for p in presets]}")\n\
-    else:\n\
-        logger.info("No voice presets found")\n\
-    \n\
-    # Test generate with simple text\n\
+    # Generate test audio\n\
     text = "This is a test of the CSM text to speech system."\n\
-    logger.info(f"Generating speech for text: \\\"{text}\\\"")\n\
+    logger.info(f"Generating speech for: \"{text}\"")\n\
     audio = generator.generate(text=text)\n\
     \n\
-    if can_save_audio and audio is not None:\n\
-        # Save the audio\n\
-        torchaudio.save(output_file, audio.unsqueeze(0).cpu(), generator.sample_rate)\n\
-        logger.info(f"Test audio saved to {output_file}")\n\
-    else:\n\
-        logger.warning("Could not save audio file (missing torchaudio or no audio generated)")\n\
-    \n\
-    # Success\n\
-    logger.info("\\n✅ CSM test completed successfully!")\n\
+    # Save the audio\n\
+    output_file = Path("/audiobook_data/test_sample.wav")\n\
+    torchaudio.save(output_file, audio.unsqueeze(0).cpu(), generator.sample_rate)\n\
+    logger.info(f"Test audio saved to {output_file}")\n\
     \n\
+    logger.info("✅ Test completed successfully!")\n\
+\n\
 except Exception as e:\n\
-    logger.error(f"\\n❌ Error testing CSM: {e}")\n\
+    logger.error(f"❌ Error: {e}")\n\
     import traceback\n\
     traceback.print_exc()\n\
-    \n\
-    # Print more diagnostic information\n\
-    logger.info("\\nDiagnostic information:")\n\
-    logger.info(f"Python version: {sys.version}")\n\
-    try:\n\
-        import torch\n\
-        logger.info(f"Torch version: {torch.__version__}")\n\
-        logger.info(f"CUDA available: {torch.cuda.is_available()}")\n\
-        if torch.cuda.is_available():\n\
-            logger.info(f"CUDA device: {torch.cuda.get_device_name(0)}")\n\
-    except ImportError:\n\
-        logger.info("Torch not available")\n\
-    \n\
-    # List installed packages\n\
-    logger.info("\\nInstalled packages:")\n\
-    import subprocess\n\
-    try:\n\
-        output = subprocess.check_output(["pip", "list"]).decode("utf-8")\n\
-        for line in output.split("\\n"):\n\
-            if any(pkg in line.lower() for pkg in ["torch", "audio", "token", "transform", "hub", "moshi"]):\n\
-                logger.info(f"  {line.strip()}")\n\
-    except Exception as pkg_err:\n\
-        logger.error(f"Could not list packages: {pkg_err}")\n\
-    \n\
     sys.exit(1)\n\
-' > /usr/local/bin/test_csm.py && chmod +x /usr/local/bin/test_csm.py
+' > /usr/local/bin/utils/test_csm.py && chmod +x /usr/local/bin/utils/test_csm.py
 
-# Create a helper script for usage instructions
+# Create entrypoint script
 RUN echo '#!/bin/bash\n\
+\n\
 echo "=================================================="\n\
-echo "Sesame CSM Audiobook Generation Container"\n\
+echo "Sesame CSM Audiobook Generator for Jetson"\n\
 echo "=================================================="\n\
 echo ""\n\
-echo "This container includes Sesame CSM (Conversational Speech Model)"\n\
-echo "optimized for audiobook generation on Jetson Orin Nano."\n\
-echo ""\n\
-echo "KEY REQUIREMENTS:"\n\
-echo " 1. Hugging Face access to models:"\n\
-echo "    - sesame/csm-1b"\n\
-echo "    - meta-llama/Llama-3.2-1B"\n\
-echo ""\n\
-echo "QUICK COMMANDS:"\n\
-echo " - Test CSM installation:"\n\
-echo "   python /usr/local/bin/test_csm.py /models/sesame-csm-1b"\n\
+echo "Available commands:"\n\
 echo ""\n\
-echo " - Generate audiobook:"\n\
-echo "   python /books/generate_audiobook_sesame.py \\"\n\
-echo "     --input /books/your_book.epub \\"\n\
-echo "     --output /audiobook_data/audiobook.mp3 \\"\n\
-echo "     --model_path /models/sesame-csm-1b \\"\n\
-echo "     --voice_preset calm"\n\
+echo "  • Test CSM installation:"\n\
+echo "    python /usr/local/bin/utils/test_csm.py /models/sesame-csm-1b"\n\
 echo ""\n\
-echo "TROUBLESHOOTING:"\n\
-echo " - If model loading fails, ensure you have:"\n\
-echo "   1. Logged in to Hugging Face: huggingface-cli login"\n\
-echo "   2. Accepted terms for meta-llama/Llama-3.2-1B on HF website"\n\
-echo "   3. Mounted your HF cache directory correctly"\n\
+echo "  • Generate audiobook:"\n\
+echo "    python /books/generate_audiobook_sesame.py \\"\n\
+echo "      --input /books/your_book.epub \\"\n\
+echo "      --output /audiobook_data/audiobook.mp3 \\"\n\
+echo "      --model_path /models/sesame-csm-1b"\n\
 echo ""\n\
-echo "IMPORTANT VOLUME MOUNTS:"\n\
-echo " - /models/sesame-csm-1b: Mount the downloaded model files here"\n\
-echo " - /books: Mount directory containing your books"\n\
-echo " - /audiobook_data: Mount directory to save output files"\n\
-echo " - \${HOME}/.cache/huggingface:/root/.cache/huggingface: For HF credentials"\n\
-echo ""\n\
-echo "EXAMPLE DOCKER RUN COMMAND:"\n\
-echo "docker run --runtime nvidia -it --rm \\"\n\
-echo "  --volume ~/audiobook_data:/audiobook_data \\"\n\
-echo "  --volume ~/audiobook:/books \\"\n\
-echo "  --volume ~/huggingface_models/sesame-csm-1b:/models/sesame-csm-1b \\"\n\
-echo "  --volume \${HOME}/.cache/huggingface:/root/.cache/huggingface \\"\n\
-echo "  --workdir /audiobook_data \\"\n\
-echo "  sesame-tts"\n\
+echo "Volume mounts:"\n\
+echo "  • /models/sesame-csm-1b: Model files"\n\
+echo "  • /books: Source books"\n\
+echo "  • /audiobook_data: Output directory"\n\
 echo ""\n\
 echo "=================================================="\n\
-echo ""\n\
+\n\
 exec "$@"\n\
 ' > /usr/local/bin/entrypoint.sh && chmod +x /usr/local/bin/entrypoint.sh
 
 # Set working directory
 WORKDIR /audiobook_data
 
-# Set the entrypoint script
+# Set entrypoint
 ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
 
 # Default command

commit 95c709d0452f8644bf55d11589b253a9641aa822
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sun Apr 13 14:11:21 2025 -0700

    Dependency Installation, Error Resilience, Improved Compatibility Layer, Enhanced Test Script, Silentcipher Installation improvements

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 96c089a..bf90ef9 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -27,46 +27,73 @@ ENV NO_TORCH_COMPILE=1
 # Create directory for CSM code
 RUN mkdir -p /opt/csm
 
-# Install Python dependencies - using more flexible versioning
-RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
-    pip3 install --no-cache-dir \
+# Install Python dependencies in smaller batches for better error isolation
+RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel
+
+# Install PyTorch and torchaudio (already in the base image)
+RUN pip3 install --no-cache-dir \
     "torch>=2.0.0,<2.5.0" \
-    "torchaudio>=2.0.0,<2.5.0" \
+    "torchaudio>=2.0.0,<2.5.0"
+
+# Install transformers and tokenizers
+RUN pip3 install --no-cache-dir \
     "tokenizers>=0.13.0,<0.22.0" \
     "transformers>=4.30.0,<4.47.0" \
-    "huggingface_hub>=0.16.0,<0.29.0" \
-    "moshi>=0.2.0,<0.3.0" \
-    "torchtune>=0.4.0,<0.5.0" \
-    "torchao>=0.9.0,<1.0.0"
+    "huggingface_hub>=0.16.0,<0.29.0"
+
+# Install moshi with fallback
+RUN pip3 install --no-cache-dir "moshi>=0.2.0,<0.3.0" || \
+    pip3 install --no-cache-dir "moshi==0.2.2" || \
+    pip3 install --no-cache-dir "moshi" || \
+    echo "Warning: Could not install moshi package. Continuing without it."
 
-# Handle silentcipher - try PyPI first, fall back to minimal git clone if needed
+# Install remaining dependencies with individual fallbacks
+RUN pip3 install --no-cache-dir "torchtune>=0.4.0,<0.5.0" || \
+    pip3 install --no-cache-dir "torchtune==0.4.0" || \
+    echo "Warning: Could not install torchtune package. Continuing without it."
+
+RUN pip3 install --no-cache-dir "torchao>=0.9.0,<1.0.0" || \
+    pip3 install --no-cache-dir "torchao==0.9.0" || \
+    echo "Warning: Could not install torchao package. Continuing without it."
+
+# Handle silentcipher - try PyPI first, fall back to git clone if needed
 RUN pip3 install --no-cache-dir silentcipher || \
-    (mkdir -p /tmp/silentcipher && \
+    (echo "Warning: Could not install silentcipher from PyPI, attempting GitHub install..." && \
+     mkdir -p /tmp/silentcipher && \
      cd /tmp/silentcipher && \
      git init && \
      git remote add origin https://github.com/SesameAILabs/silentcipher.git && \
      git fetch --depth 1 origin master && \
      git checkout FETCH_HEAD && \
-     pip install . && \
-     cd / && \
-     rm -rf /tmp/silentcipher)
+     pip install -e . || echo "Warning: Could not install silentcipher from GitHub. Continuing without it.")
 
 # Install additional dependencies needed for audiobook generation
+# Split into groups for better error isolation
 RUN pip3 install --no-cache-dir \
     PyPDF2 \
     pdfminer.six \
     nltk \
     tqdm \
     pydub \
-    psutil \
+    psutil
+
+RUN pip3 install --no-cache-dir \
     ebooklib \
-    beautifulsoup4 \
-    einops \
-    rotary_embedding_torch \
-    vector_quantize_pytorch \
+    beautifulsoup4
+
+RUN pip3 install --no-cache-dir \
+    einops || echo "Warning: Could not install einops. Continuing without it."
+
+RUN pip3 install --no-cache-dir \
+    rotary_embedding_torch || echo "Warning: Could not install rotary_embedding_torch. Continuing without it."
+
+RUN pip3 install --no-cache-dir \
+    vector_quantize_pytorch || echo "Warning: Could not install vector_quantize_pytorch. Continuing without it."
+
+RUN pip3 install --no-cache-dir \
     accelerate \
     soundfile \
-    datasets[audio]
+    "datasets[audio]" || pip3 install --no-cache-dir datasets
 
 # Download key CSM files instead of cloning the whole repo
 WORKDIR /opt/csm
@@ -158,84 +185,145 @@ __all__ = ["load_csm_1b", "Segment", "Generator"]\n\
 # Create an optimized script to test CSM
 RUN echo '#!/usr/bin/env python3\n\
 import sys\n\
-import torch\n\
-import torchaudio\n\
 import os\n\
 import importlib.util\n\
 from pathlib import Path\n\
+import logging\n\
+\n\
+# Configure logging\n\
+logging.basicConfig(\n\
+    level=logging.INFO,\n\
+    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"\n\
+)\n\
+logger = logging.getLogger("test_csm")\n\
 \n\
 # Add CSM root to path\n\
 if os.path.exists("/opt/csm"):\n\
     sys.path.insert(0, "/opt/csm")\n\
 \n\
 try:\n\
-    # First try to import from CSM package\n\
+    # First try to import torch\n\
     try:\n\
-        from csm import load_csm_1b, Segment\n\
-        print("Successfully imported from csm package")\n\
+        import torch\n\
+        logger.info(f"PyTorch version: {torch.__version__}")\n\
+        logger.info(f"CUDA available: {torch.cuda.is_available()}")\n\
+        if torch.cuda.is_available():\n\
+            device = "cuda"\n\
+            logger.info(f"CUDA device: {torch.cuda.get_device_name(0)}")\n\
+        else:\n\
+            device = "cpu"\n\
+            logger.info("CUDA not available, using CPU")\n\
+    except ImportError as e:\n\
+        logger.error(f"Failed to import torch: {e}")\n\
+        device = "cpu"\n\
+\n\
+    # Try to import torchaudio for saving the test file\n\
+    try:\n\
+        import torchaudio\n\
+        logger.info(f"torchaudio version: {torchaudio.__version__}")\n\
+        can_save_audio = True\n\
+    except ImportError as e:\n\
+        logger.warning(f"Failed to import torchaudio: {e}. Won\'t be able to save audio.")\n\
+        can_save_audio = False\n\
+\n\
+    # First try to import from csm package\n\
+    try:\n\
+        # Try the compat module first\n\
+        from csm_compat import load_csm_1b, Segment, Generator\n\
+        logger.info("Successfully imported from csm_compat module")\n\
     except ImportError:\n\
-        # Fall back to importing directly from generator.py\n\
-        print("Falling back to direct generator.py import")\n\
-        if os.path.exists("/opt/csm/generator.py"):\n\
-            sys.path.insert(0, "/opt/csm")\n\
+        try:\n\
+            # Try importing from generator.py directly\n\
             from generator import load_csm_1b, Segment\n\
-        else:\n\
-            raise ImportError("Could not find generator.py or csm package")\n\
+            logger.info("Successfully imported from generator.py module")\n\
+        except ImportError as e:\n\
+            logger.error(f"Failed to import CSM modules: {e}")\n\
+            logger.error("Cannot proceed without CSM modules")\n\
+            sys.exit(1)\n\
     \n\
-    device = "cuda" if torch.cuda.is_available() else "cpu"\n\
-    print(f"\\nUsing device: {device}\\n")\n\
+    logger.info(f"\\nUsing device: {device}\\n")\n\
     \n\
     # Path to model\n\
     model_path = sys.argv[1] if len(sys.argv) > 1 else "/models/sesame-csm-1b"\n\
-    print(f"Loading model from: {model_path}")\n\
+    logger.info(f"Loading model from: {model_path}")\n\
     \n\
     # Check if model exists\n\
     if not os.path.exists(model_path):\n\
-        print(f"ERROR: Model path {model_path} does not exist!")\n\
-        print("Make sure you have mounted the model directory correctly.")\n\
+        logger.error(f"ERROR: Model path {model_path} does not exist!")\n\
+        logger.error("Make sure you have mounted the model directory correctly.")\n\
+        logger.info("Available paths:")\n\
+        for path in ["/models", "/models/sesame-csm-1b", "/audiobook_data", "/books"]:\n\
+            if os.path.exists(path):\n\
+                logger.info(f"  - {path} (exists, content: {os.listdir(path) if os.path.isdir(path) else \'file\'})")\n\
+            else:\n\
+                logger.info(f"  - {path} (does not exist)")\n\
         sys.exit(1)\n\
     \n\
     # Load model\n\
-    print("Initializing CSM model...")\n\
-    generator = load_csm_1b(model_path=model_path, device=device)\n\
-    print(f"Model loaded successfully. Sample rate: {generator.sample_rate}")\n\
+    logger.info("Initializing CSM model...")\n\
+    try:\n\
+        generator = load_csm_1b(model_path=model_path, device=device)\n\
+        logger.info(f"Model loaded successfully. Sample rate: {generator.sample_rate}")\n\
+    except Exception as e:\n\
+        logger.error(f"Error loading model: {e}")\n\
+        import traceback\n\
+        traceback.print_exc()\n\
+        sys.exit(1)\n\
     \n\
     # Test generate a short sample\n\
-    print("\\nGenerating test audio...")\n\
+    logger.info("\\nGenerating test audio...")\n\
     output_file = Path("/audiobook_data/test_sample.wav")\n\
     \n\
     # Get voice presets if available\n\
     preset_dir = Path(model_path) / "prompts"\n\
     presets = list(preset_dir.glob("*.wav")) if preset_dir.exists() else []\n\
     if presets:\n\
-        print(f"Available voice presets: {[p.stem for p in presets]}")\n\
+        logger.info(f"Available voice presets: {[p.stem for p in presets]}")\n\
     else:\n\
-        print("No voice presets found")\n\
+        logger.info("No voice presets found")\n\
     \n\
     # Test generate with simple text\n\
     text = "This is a test of the CSM text to speech system."\n\
-    print(f"Generating speech for text: \\\"{text}\\\"")\n\
+    logger.info(f"Generating speech for text: \\\"{text}\\\"")\n\
     audio = generator.generate(text=text)\n\
     \n\
-    # Save the audio\n\
-    torchaudio.save(output_file, audio.unsqueeze(0).cpu(), generator.sample_rate)\n\
-    print(f"Test audio saved to {output_file}")\n\
+    if can_save_audio and audio is not None:\n\
+        # Save the audio\n\
+        torchaudio.save(output_file, audio.unsqueeze(0).cpu(), generator.sample_rate)\n\
+        logger.info(f"Test audio saved to {output_file}")\n\
+    else:\n\
+        logger.warning("Could not save audio file (missing torchaudio or no audio generated)")\n\
     \n\
     # Success\n\
-    print("\\n✅ CSM is working correctly!")\n\
+    logger.info("\\n✅ CSM test completed successfully!")\n\
     \n\
 except Exception as e:\n\
-    print(f"\\n❌ Error testing CSM: {e}")\n\
+    logger.error(f"\\n❌ Error testing CSM: {e}")\n\
     import traceback\n\
     traceback.print_exc()\n\
     \n\
     # Print more diagnostic information\n\
-    print("\\nDiagnostic information:")\n\
-    print(f"Python version: {sys.version}")\n\
-    print(f"Torch version: {torch.__version__}")\n\
-    print(f"CUDA available: {torch.cuda.is_available()}")\n\
-    if torch.cuda.is_available():\n\
-        print(f"CUDA device: {torch.cuda.get_device_name(0)}")\n\
+    logger.info("\\nDiagnostic information:")\n\
+    logger.info(f"Python version: {sys.version}")\n\
+    try:\n\
+        import torch\n\
+        logger.info(f"Torch version: {torch.__version__}")\n\
+        logger.info(f"CUDA available: {torch.cuda.is_available()}")\n\
+        if torch.cuda.is_available():\n\
+            logger.info(f"CUDA device: {torch.cuda.get_device_name(0)}")\n\
+    except ImportError:\n\
+        logger.info("Torch not available")\n\
+    \n\
+    # List installed packages\n\
+    logger.info("\\nInstalled packages:")\n\
+    import subprocess\n\
+    try:\n\
+        output = subprocess.check_output(["pip", "list"]).decode("utf-8")\n\
+        for line in output.split("\\n"):\n\
+            if any(pkg in line.lower() for pkg in ["torch", "audio", "token", "transform", "hub", "moshi"]):\n\
+                logger.info(f"  {line.strip()}")\n\
+    except Exception as pkg_err:\n\
+        logger.error(f"Could not list packages: {pkg_err}")\n\
     \n\
     sys.exit(1)\n\
 ' > /usr/local/bin/test_csm.py && chmod +x /usr/local/bin/test_csm.py

commit b0b538cb088fd9bf7ccee33d0da4e5d6aaef06ce
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sun Apr 13 14:04:55 2025 -0700

    Lower the Version Requirements for All Dependencies

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 4450494..96c089a 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -27,18 +27,17 @@ ENV NO_TORCH_COMPILE=1
 # Create directory for CSM code
 RUN mkdir -p /opt/csm
 
-# Install Python dependencies with exact versions from CSM's requirements.txt
-# Avoid git clone by installing packages through pip
+# Install Python dependencies - using more flexible versioning
 RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
     pip3 install --no-cache-dir \
-    torch==2.4.0 \
-    torchaudio==2.4.0 \
-    tokenizers==0.21.0 \
-    transformers==4.49.0 \
-    huggingface_hub==0.28.1 \
-    moshi==0.2.2 \
-    torchtune==0.4.0 \
-    torchao==0.9.0
+    "torch>=2.0.0,<2.5.0" \
+    "torchaudio>=2.0.0,<2.5.0" \
+    "tokenizers>=0.13.0,<0.22.0" \
+    "transformers>=4.30.0,<4.47.0" \
+    "huggingface_hub>=0.16.0,<0.29.0" \
+    "moshi>=0.2.0,<0.3.0" \
+    "torchtune>=0.4.0,<0.5.0" \
+    "torchao>=0.9.0,<1.0.0"
 
 # Handle silentcipher - try PyPI first, fall back to minimal git clone if needed
 RUN pip3 install --no-cache-dir silentcipher || \

commit 795ab13010f1282fe08eb1990133a8db5c3b11a9
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sun Apr 13 10:34:32 2025 -0700

    prioritizes pip installations and minimizes direct GitHub dependencies for better reliability.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index e1bf784..4450494 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -1,99 +1,302 @@
 FROM dustynv/l4t-pytorch:r35.4.1
 
-# Install system dependencies including wget and unzip
+# Set environment variables
+ENV PYTHONUNBUFFERED=1 \
+    PYTHONDONTWRITEBYTECODE=1 \
+    PATH="/root/.cargo/bin:${PATH}" \
+    PIP_DISABLE_PIP_VERSION_CHECK=1
+
+# Install system dependencies
 RUN apt-get update && apt-get install -y \
     ffmpeg \
     libsndfile1 \
     python3-pip \
+    python3-venv \
     git \
-    curl \
-    unzip \
     wget \
+    unzip \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/*
 
-# Install Rust/Cargo
-ENV PATH="/root/.cargo/bin:${PATH}"
-RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
+# Install Rust/Cargo (required for silentcipher dependency)
+RUN wget -q -O - https://sh.rustup.rs | sh -s -- -y
+
+# Disable Triton compilation which can cause issues on Jetson
+ENV NO_TORCH_COMPILE=1
+
+# Create directory for CSM code
+RUN mkdir -p /opt/csm
 
-# Install base Python dependencies (already included: transformers, torch, torchaudio, numpy, scipy, librosa, soundfile)
+# Install Python dependencies with exact versions from CSM's requirements.txt
+# Avoid git clone by installing packages through pip
+RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
+    pip3 install --no-cache-dir \
+    torch==2.4.0 \
+    torchaudio==2.4.0 \
+    tokenizers==0.21.0 \
+    transformers==4.49.0 \
+    huggingface_hub==0.28.1 \
+    moshi==0.2.2 \
+    torchtune==0.4.0 \
+    torchao==0.9.0
+
+# Handle silentcipher - try PyPI first, fall back to minimal git clone if needed
+RUN pip3 install --no-cache-dir silentcipher || \
+    (mkdir -p /tmp/silentcipher && \
+     cd /tmp/silentcipher && \
+     git init && \
+     git remote add origin https://github.com/SesameAILabs/silentcipher.git && \
+     git fetch --depth 1 origin master && \
+     git checkout FETCH_HEAD && \
+     pip install . && \
+     cd / && \
+     rm -rf /tmp/silentcipher)
+
+# Install additional dependencies needed for audiobook generation
 RUN pip3 install --no-cache-dir \
     PyPDF2 \
     pdfminer.six \
     nltk \
     tqdm \
     pydub \
-    huggingface_hub \
     psutil \
     ebooklib \
-    beautifulsoup4
+    beautifulsoup4 \
+    einops \
+    rotary_embedding_torch \
+    vector_quantize_pytorch \
+    accelerate \
+    soundfile \
+    datasets[audio]
 
-# Download NLTK data
-RUN python3 -c "import nltk; nltk.download('punkt')"
+# Download key CSM files instead of cloning the whole repo
+WORKDIR /opt/csm
+RUN wget -q https://raw.githubusercontent.com/SesameAILabs/csm/2d720827843b653c4d67bb4445b1c0a4f59e646f/generator.py && \
+    wget -q https://raw.githubusercontent.com/SesameAILabs/csm/2d720827843b653c4d67bb4445b1c0a4f59e646f/models.py && \
+    wget -q https://raw.githubusercontent.com/SesameAILabs/csm/2d720827843b653c4d67bb4445b1c0a4f59e646f/setup.py
 
-# --- Pre-install silentcipher with modified dependencies ---
-WORKDIR /opt
-# Download and unzip silentcipher using wget
-RUN wget https://github.com/SesameAILabs/silentcipher/archive/refs/heads/main.zip -O silentcipher.zip && \
-    unzip silentcipher.zip && \
-    rm silentcipher.zip && \
-    # Rename extracted folder (usually repo-branch)
-    mv silentcipher-main silentcipher
-
-WORKDIR /opt/silentcipher
-# Relax numpy and scipy requirements in silentcipher's setup files
-RUN sed -i "s/numpy>=[0-9.]*/numpy/" setup.py requirements.txt || true
-RUN sed -i "s/scipy>=[0-9.]*/scipy/" setup.py requirements.txt || true
-RUN pip install .
-
-# --- End silentcipher ---
-
-# --- Install CSM dependencies and CSM itself ---
-WORKDIR /opt
-# Download, unzip, and install mimi locally using wget
-RUN wget https://github.com/SesameAILabs/mimi/archive/refs/heads/main.zip -O mimi.zip && \
-    unzip mimi.zip && \
-    rm mimi.zip && \
-    # Rename extracted folder
-    mv mimi-main mimi && \
-    cd mimi && \
-    pip install . && \
-    cd .. && \
-    rm -rf mimi # Clean up extracted repo after install
-
-# Install other specific CSM dependencies
-RUN pip install einops rotary_embedding_torch vector_quantize_pytorch xformers accelerate
-
-# Download and unzip CSM repo using wget
-RUN wget https://github.com/SesameAILabs/csm/archive/refs/heads/main.zip -O csm.zip && \
-    unzip csm.zip && \
-    rm csm.zip && \
-    # Rename extracted folder
-    mv csm-main csm
+# Create an __init__.py file to make the directory a Python package
+RUN touch __init__.py && \
+    echo 'from .generator import load_csm_1b, Segment, Generator' > __init__.py
 
+# Install the package in development mode with minimal files
 WORKDIR /opt/csm
-# Remove dependencies we installed manually or are in the base image from setup.py
-RUN sed -i '/^transformers/d' setup.py && \
-    sed -i '/^torch/d' setup.py && \
-    sed -i '/^torchaudio/d' setup.py && \
-    sed -i '/^numpy/d' setup.py && \
-    sed -i '/^scipy/d' setup.py && \
-    sed -i '/^librosa/d' setup.py && \
-    sed -i '/^soundfile/d' setup.py && \
-    sed -i '/^einops/d' setup.py && \
-    sed -i '/^rotary_embedding_torch/d' setup.py && \
-    sed -i '/^vector_quantize_pytorch/d' setup.py && \
-    sed -i '/^xformers/d' setup.py && \
-    sed -i '/^accelerate/d' setup.py && \
-    sed -i '/mimi @ git/d' setup.py && \
-    sed -i '/silentcipher @ git/d' setup.py
-
-# Install CSM in editable mode (adds /opt/csm to path implicitly for the build)
 RUN pip install -e .
-# --- End CSM ---
+
+# Download NLTK data
+RUN python3 -c "import nltk; nltk.download('punkt')"
 
 # Create directories for mounting volumes
 RUN mkdir -p /audiobook_data /books /models
 
+# Create a compatibility module for newer CSM API
+RUN echo '"""\nCompatibility module for CSM API changes\n"""\n\
+import os\n\
+import sys\n\
+import torch\n\
+import logging\n\
+from pathlib import Path\n\
+\n\
+# Setup logging\n\
+logging.basicConfig(level=logging.INFO)\n\
+logger = logging.getLogger("csm_compat")\n\
+\n\
+# Add the CSM module path if present\n\
+if os.path.exists("/opt/csm"):\n\
+    sys.path.insert(0, "/opt/csm")\n\
+\n\
+try:\n\
+    # Try to import directly from the downloaded files\n\
+    from generator import load_csm_1b as _original_load_csm_1b, Segment, Generator\n\
+    logger.info("Using direct generator.py imports")\n\
+except ImportError as e:\n\
+    logger.error(f"Failed to import from generator.py: {e}")\n\
+    # Fallback implementation\n\
+    from dataclasses import dataclass\n\
+    import torch\n\
+    \n\
+    @dataclass\n\
+    class Segment:\n\
+        text: str\n\
+        speaker: int = 0\n\
+        audio: torch.Tensor = None\n\
+    \n\
+    class Generator:\n\
+        def __init__(self):\n\
+            self.sample_rate = 24000\n\
+        \n\
+        def generate(self, text, speaker=0, context=None, max_audio_length_ms=10000):\n\
+            logger.error("Placeholder Generator - no real implementation available")\n\
+            # Return empty audio of correct shape\n\
+            return torch.zeros(int(self.sample_rate * max_audio_length_ms / 1000))\n\
+    \n\
+    def _original_load_csm_1b(model_path, device="cuda"):\n\
+        logger.error("Placeholder load_csm_1b - no real implementation available")\n\
+        return Generator()\n\
+\n\
+def load_csm_1b(model_path=None, device="cuda"):\n\
+    """\n\
+    Compatible loader that handles API changes between versions\n\
+    """\n\
+    logger.info(f"Loading CSM model from {model_path} on {device}")\n\
+    \n\
+    try:\n\
+        # Original loading function from generator.py\n\
+        return _original_load_csm_1b(model_path=model_path, device=device)\n\
+        \n\
+    except Exception as e:\n\
+        logger.error(f"Error loading CSM model: {e}")\n\
+        raise\n\
+\n\
+__all__ = ["load_csm_1b", "Segment", "Generator"]\n\
+' > /opt/csm/csm_compat.py
+
+# Create an __init__.py to re-export from the compatibility module
+RUN echo 'from .csm_compat import load_csm_1b, Segment, Generator\n\
+__all__ = ["load_csm_1b", "Segment", "Generator"]\n\
+' > /opt/csm/__init__.py
+
+# Create an optimized script to test CSM
+RUN echo '#!/usr/bin/env python3\n\
+import sys\n\
+import torch\n\
+import torchaudio\n\
+import os\n\
+import importlib.util\n\
+from pathlib import Path\n\
+\n\
+# Add CSM root to path\n\
+if os.path.exists("/opt/csm"):\n\
+    sys.path.insert(0, "/opt/csm")\n\
+\n\
+try:\n\
+    # First try to import from CSM package\n\
+    try:\n\
+        from csm import load_csm_1b, Segment\n\
+        print("Successfully imported from csm package")\n\
+    except ImportError:\n\
+        # Fall back to importing directly from generator.py\n\
+        print("Falling back to direct generator.py import")\n\
+        if os.path.exists("/opt/csm/generator.py"):\n\
+            sys.path.insert(0, "/opt/csm")\n\
+            from generator import load_csm_1b, Segment\n\
+        else:\n\
+            raise ImportError("Could not find generator.py or csm package")\n\
+    \n\
+    device = "cuda" if torch.cuda.is_available() else "cpu"\n\
+    print(f"\\nUsing device: {device}\\n")\n\
+    \n\
+    # Path to model\n\
+    model_path = sys.argv[1] if len(sys.argv) > 1 else "/models/sesame-csm-1b"\n\
+    print(f"Loading model from: {model_path}")\n\
+    \n\
+    # Check if model exists\n\
+    if not os.path.exists(model_path):\n\
+        print(f"ERROR: Model path {model_path} does not exist!")\n\
+        print("Make sure you have mounted the model directory correctly.")\n\
+        sys.exit(1)\n\
+    \n\
+    # Load model\n\
+    print("Initializing CSM model...")\n\
+    generator = load_csm_1b(model_path=model_path, device=device)\n\
+    print(f"Model loaded successfully. Sample rate: {generator.sample_rate}")\n\
+    \n\
+    # Test generate a short sample\n\
+    print("\\nGenerating test audio...")\n\
+    output_file = Path("/audiobook_data/test_sample.wav")\n\
+    \n\
+    # Get voice presets if available\n\
+    preset_dir = Path(model_path) / "prompts"\n\
+    presets = list(preset_dir.glob("*.wav")) if preset_dir.exists() else []\n\
+    if presets:\n\
+        print(f"Available voice presets: {[p.stem for p in presets]}")\n\
+    else:\n\
+        print("No voice presets found")\n\
+    \n\
+    # Test generate with simple text\n\
+    text = "This is a test of the CSM text to speech system."\n\
+    print(f"Generating speech for text: \\\"{text}\\\"")\n\
+    audio = generator.generate(text=text)\n\
+    \n\
+    # Save the audio\n\
+    torchaudio.save(output_file, audio.unsqueeze(0).cpu(), generator.sample_rate)\n\
+    print(f"Test audio saved to {output_file}")\n\
+    \n\
+    # Success\n\
+    print("\\n✅ CSM is working correctly!")\n\
+    \n\
+except Exception as e:\n\
+    print(f"\\n❌ Error testing CSM: {e}")\n\
+    import traceback\n\
+    traceback.print_exc()\n\
+    \n\
+    # Print more diagnostic information\n\
+    print("\\nDiagnostic information:")\n\
+    print(f"Python version: {sys.version}")\n\
+    print(f"Torch version: {torch.__version__}")\n\
+    print(f"CUDA available: {torch.cuda.is_available()}")\n\
+    if torch.cuda.is_available():\n\
+        print(f"CUDA device: {torch.cuda.get_device_name(0)}")\n\
+    \n\
+    sys.exit(1)\n\
+' > /usr/local/bin/test_csm.py && chmod +x /usr/local/bin/test_csm.py
+
+# Create a helper script for usage instructions
+RUN echo '#!/bin/bash\n\
+echo "=================================================="\n\
+echo "Sesame CSM Audiobook Generation Container"\n\
+echo "=================================================="\n\
+echo ""\n\
+echo "This container includes Sesame CSM (Conversational Speech Model)"\n\
+echo "optimized for audiobook generation on Jetson Orin Nano."\n\
+echo ""\n\
+echo "KEY REQUIREMENTS:"\n\
+echo " 1. Hugging Face access to models:"\n\
+echo "    - sesame/csm-1b"\n\
+echo "    - meta-llama/Llama-3.2-1B"\n\
+echo ""\n\
+echo "QUICK COMMANDS:"\n\
+echo " - Test CSM installation:"\n\
+echo "   python /usr/local/bin/test_csm.py /models/sesame-csm-1b"\n\
+echo ""\n\
+echo " - Generate audiobook:"\n\
+echo "   python /books/generate_audiobook_sesame.py \\"\n\
+echo "     --input /books/your_book.epub \\"\n\
+echo "     --output /audiobook_data/audiobook.mp3 \\"\n\
+echo "     --model_path /models/sesame-csm-1b \\"\n\
+echo "     --voice_preset calm"\n\
+echo ""\n\
+echo "TROUBLESHOOTING:"\n\
+echo " - If model loading fails, ensure you have:"\n\
+echo "   1. Logged in to Hugging Face: huggingface-cli login"\n\
+echo "   2. Accepted terms for meta-llama/Llama-3.2-1B on HF website"\n\
+echo "   3. Mounted your HF cache directory correctly"\n\
+echo ""\n\
+echo "IMPORTANT VOLUME MOUNTS:"\n\
+echo " - /models/sesame-csm-1b: Mount the downloaded model files here"\n\
+echo " - /books: Mount directory containing your books"\n\
+echo " - /audiobook_data: Mount directory to save output files"\n\
+echo " - \${HOME}/.cache/huggingface:/root/.cache/huggingface: For HF credentials"\n\
+echo ""\n\
+echo "EXAMPLE DOCKER RUN COMMAND:"\n\
+echo "docker run --runtime nvidia -it --rm \\"\n\
+echo "  --volume ~/audiobook_data:/audiobook_data \\"\n\
+echo "  --volume ~/audiobook:/books \\"\n\
+echo "  --volume ~/huggingface_models/sesame-csm-1b:/models/sesame-csm-1b \\"\n\
+echo "  --volume \${HOME}/.cache/huggingface:/root/.cache/huggingface \\"\n\
+echo "  --workdir /audiobook_data \\"\n\
+echo "  sesame-tts"\n\
+echo ""\n\
+echo "=================================================="\n\
+echo ""\n\
+exec "$@"\n\
+' > /usr/local/bin/entrypoint.sh && chmod +x /usr/local/bin/entrypoint.sh
+
 # Set working directory
-WORKDIR /audiobook_data
\ No newline at end of file
+WORKDIR /audiobook_data
+
+# Set the entrypoint script
+ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
+
+# Default command
+CMD ["bash"]
\ No newline at end of file

commit c4f84ccf34fc578b6a01a193d92b68c5bfe974b1
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 23:34:02 2025 -0700

    Add a new section detailing the Docker build troubleshooting steps.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 0c5be68..e1bf784 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -1,6 +1,6 @@
 FROM dustynv/l4t-pytorch:r35.4.1
 
-# Install system dependencies including curl, git (still needed for pip?), and unzip
+# Install system dependencies including wget and unzip
 RUN apt-get update && apt-get install -y \
     ffmpeg \
     libsndfile1 \
@@ -8,6 +8,7 @@ RUN apt-get update && apt-get install -y \
     git \
     curl \
     unzip \
+    wget \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/*
 
@@ -32,8 +33,8 @@ RUN python3 -c "import nltk; nltk.download('punkt')"
 
 # --- Pre-install silentcipher with modified dependencies ---
 WORKDIR /opt
-# Download and unzip silentcipher
-RUN curl -L -o silentcipher.zip https://github.com/SesameAILabs/silentcipher/archive/refs/heads/main.zip && \
+# Download and unzip silentcipher using wget
+RUN wget https://github.com/SesameAILabs/silentcipher/archive/refs/heads/main.zip -O silentcipher.zip && \
     unzip silentcipher.zip && \
     rm silentcipher.zip && \
     # Rename extracted folder (usually repo-branch)
@@ -44,12 +45,13 @@ WORKDIR /opt/silentcipher
 RUN sed -i "s/numpy>=[0-9.]*/numpy/" setup.py requirements.txt || true
 RUN sed -i "s/scipy>=[0-9.]*/scipy/" setup.py requirements.txt || true
 RUN pip install .
+
 # --- End silentcipher ---
 
 # --- Install CSM dependencies and CSM itself ---
 WORKDIR /opt
-# Download, unzip, and install mimi locally
-RUN curl -L -o mimi.zip https://github.com/SesameAILabs/mimi/archive/refs/heads/main.zip && \
+# Download, unzip, and install mimi locally using wget
+RUN wget https://github.com/SesameAILabs/mimi/archive/refs/heads/main.zip -O mimi.zip && \
     unzip mimi.zip && \
     rm mimi.zip && \
     # Rename extracted folder
@@ -62,8 +64,8 @@ RUN curl -L -o mimi.zip https://github.com/SesameAILabs/mimi/archive/refs/heads/
 # Install other specific CSM dependencies
 RUN pip install einops rotary_embedding_torch vector_quantize_pytorch xformers accelerate
 
-# Download and unzip CSM repo
-RUN curl -L -o csm.zip https://github.com/SesameAILabs/csm/archive/refs/heads/main.zip && \
+# Download and unzip CSM repo using wget
+RUN wget https://github.com/SesameAILabs/csm/archive/refs/heads/main.zip -O csm.zip && \
     unzip csm.zip && \
     rm csm.zip && \
     # Rename extracted folder

commit c17ffde88c76f5ac6f67855be36290c685b42b3f
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 23:22:27 2025 -0700

    Replace git clone with curl and unzip. Add unzip package.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 48cb006..0c5be68 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -1,12 +1,13 @@
 FROM dustynv/l4t-pytorch:r35.4.1
 
-# Install system dependencies including curl for rustup
+# Install system dependencies including curl, git (still needed for pip?), and unzip
 RUN apt-get update && apt-get install -y \
     ffmpeg \
     libsndfile1 \
     python3-pip \
     git \
     curl \
+    unzip \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/*
 
@@ -31,30 +32,43 @@ RUN python3 -c "import nltk; nltk.download('punkt')"
 
 # --- Pre-install silentcipher with modified dependencies ---
 WORKDIR /opt
-# Clone silentcipher using HTTP and disable terminal prompt
-RUN GIT_TERMINAL_PROMPT=0 git clone http://github.com/SesameAILabs/silentcipher.git
+# Download and unzip silentcipher
+RUN curl -L -o silentcipher.zip https://github.com/SesameAILabs/silentcipher/archive/refs/heads/main.zip && \
+    unzip silentcipher.zip && \
+    rm silentcipher.zip && \
+    # Rename extracted folder (usually repo-branch)
+    mv silentcipher-main silentcipher
+
 WORKDIR /opt/silentcipher
 # Relax numpy and scipy requirements in silentcipher's setup files
 RUN sed -i "s/numpy>=[0-9.]*/numpy/" setup.py requirements.txt || true
 RUN sed -i "s/scipy>=[0-9.]*/scipy/" setup.py requirements.txt || true
-# Install the modified silentcipher globally
 RUN pip install .
 # --- End silentcipher ---
 
 # --- Install CSM dependencies and CSM itself ---
 WORKDIR /opt
-# Clone and install mimi locally using HTTP and disable terminal prompt
-RUN GIT_TERMINAL_PROMPT=0 git clone http://github.com/SesameAILabs/mimi.git && \
+# Download, unzip, and install mimi locally
+RUN curl -L -o mimi.zip https://github.com/SesameAILabs/mimi/archive/refs/heads/main.zip && \
+    unzip mimi.zip && \
+    rm mimi.zip && \
+    # Rename extracted folder
+    mv mimi-main mimi && \
     cd mimi && \
     pip install . && \
     cd .. && \
-    rm -rf mimi # Clean up cloned repo after install
+    rm -rf mimi # Clean up extracted repo after install
 
-# Install other specific CSM dependencies (ignore versions for broader compatibility initially)
+# Install other specific CSM dependencies
 RUN pip install einops rotary_embedding_torch vector_quantize_pytorch xformers accelerate
 
-# Clone CSM repo using HTTP and disable terminal prompt
-RUN GIT_TERMINAL_PROMPT=0 git clone http://github.com/SesameAILabs/csm.git
+# Download and unzip CSM repo
+RUN curl -L -o csm.zip https://github.com/SesameAILabs/csm/archive/refs/heads/main.zip && \
+    unzip csm.zip && \
+    rm csm.zip && \
+    # Rename extracted folder
+    mv csm-main csm
+
 WORKDIR /opt/csm
 # Remove dependencies we installed manually or are in the base image from setup.py
 RUN sed -i '/^transformers/d' setup.py && \

commit 40dc707263af4e5b2ae34c43ce6349f80c9f5d44
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 23:17:00 2025 -0700

    Add GIT_TERMINAL_PROMPT=0 before the git clone commands.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index b2313bc..48cb006 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -31,8 +31,8 @@ RUN python3 -c "import nltk; nltk.download('punkt')"
 
 # --- Pre-install silentcipher with modified dependencies ---
 WORKDIR /opt
-# Clone silentcipher using HTTP
-RUN git clone http://github.com/SesameAILabs/silentcipher.git
+# Clone silentcipher using HTTP and disable terminal prompt
+RUN GIT_TERMINAL_PROMPT=0 git clone http://github.com/SesameAILabs/silentcipher.git
 WORKDIR /opt/silentcipher
 # Relax numpy and scipy requirements in silentcipher's setup files
 RUN sed -i "s/numpy>=[0-9.]*/numpy/" setup.py requirements.txt || true
@@ -43,8 +43,8 @@ RUN pip install .
 
 # --- Install CSM dependencies and CSM itself ---
 WORKDIR /opt
-# Clone and install mimi locally using HTTP
-RUN git clone http://github.com/SesameAILabs/mimi.git && \
+# Clone and install mimi locally using HTTP and disable terminal prompt
+RUN GIT_TERMINAL_PROMPT=0 git clone http://github.com/SesameAILabs/mimi.git && \
     cd mimi && \
     pip install . && \
     cd .. && \
@@ -53,8 +53,8 @@ RUN git clone http://github.com/SesameAILabs/mimi.git && \
 # Install other specific CSM dependencies (ignore versions for broader compatibility initially)
 RUN pip install einops rotary_embedding_torch vector_quantize_pytorch xformers accelerate
 
-# Clone CSM repo using HTTP
-RUN git clone http://github.com/SesameAILabs/csm.git
+# Clone CSM repo using HTTP and disable terminal prompt
+RUN GIT_TERMINAL_PROMPT=0 git clone http://github.com/SesameAILabs/csm.git
 WORKDIR /opt/csm
 # Remove dependencies we installed manually or are in the base image from setup.py
 RUN sed -i '/^transformers/d' setup.py && \

commit dab345a7ce059f277844a706b02adee23e0adae8
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 23:13:33 2025 -0700

    Change https to http in the git clone URLs for both silentcipher and mimi.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 17193e2..b2313bc 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -31,17 +31,20 @@ RUN python3 -c "import nltk; nltk.download('punkt')"
 
 # --- Pre-install silentcipher with modified dependencies ---
 WORKDIR /opt
-RUN git clone https://github.com/SesameAILabs/silentcipher.git
+# Clone silentcipher using HTTP
+RUN git clone http://github.com/SesameAILabs/silentcipher.git
 WORKDIR /opt/silentcipher
+# Relax numpy and scipy requirements in silentcipher's setup files
 RUN sed -i "s/numpy>=[0-9.]*/numpy/" setup.py requirements.txt || true
 RUN sed -i "s/scipy>=[0-9.]*/scipy/" setup.py requirements.txt || true
+# Install the modified silentcipher globally
 RUN pip install .
 # --- End silentcipher ---
 
 # --- Install CSM dependencies and CSM itself ---
 WORKDIR /opt
-# Clone and install mimi locally
-RUN git clone https://github.com/SesameAILabs/mimi.git && \
+# Clone and install mimi locally using HTTP
+RUN git clone http://github.com/SesameAILabs/mimi.git && \
     cd mimi && \
     pip install . && \
     cd .. && \
@@ -50,8 +53,8 @@ RUN git clone https://github.com/SesameAILabs/mimi.git && \
 # Install other specific CSM dependencies (ignore versions for broader compatibility initially)
 RUN pip install einops rotary_embedding_torch vector_quantize_pytorch xformers accelerate
 
-# Clone CSM repo
-RUN git clone https://github.com/SesameAILabs/csm.git
+# Clone CSM repo using HTTP
+RUN git clone http://github.com/SesameAILabs/csm.git
 WORKDIR /opt/csm
 # Remove dependencies we installed manually or are in the base image from setup.py
 RUN sed -i '/^transformers/d' setup.py && \

commit 3b09317f5c40b5f2a2577eff1ccc8f9d833fe79e
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 23:10:35 2025 -0700

    Clone mimi first, then install it locally.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 1448d8a..17193e2 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -40,8 +40,13 @@ RUN pip install .
 
 # --- Install CSM dependencies and CSM itself ---
 WORKDIR /opt
-# Install mimi first
-RUN pip install git+https://github.com/SesameAILabs/mimi.git
+# Clone and install mimi locally
+RUN git clone https://github.com/SesameAILabs/mimi.git && \
+    cd mimi && \
+    pip install . && \
+    cd .. && \
+    rm -rf mimi # Clean up cloned repo after install
+
 # Install other specific CSM dependencies (ignore versions for broader compatibility initially)
 RUN pip install einops rotary_embedding_torch vector_quantize_pytorch xformers accelerate
 

commit dd13b40fc41b9a2b7e55f211567c878cab4a03b5
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 23:04:18 2025 -0700

    Dockerfile
    Install csm dependencies and then csm itself using pip.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 2ca1fa9..1448d8a 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -5,6 +5,7 @@ RUN apt-get update && apt-get install -y \
     ffmpeg \
     libsndfile1 \
     python3-pip \
+    git \
     curl \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/*
@@ -13,19 +14,14 @@ RUN apt-get update && apt-get install -y \
 ENV PATH="/root/.cargo/bin:${PATH}"
 RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
 
-# Install Python dependencies
+# Install base Python dependencies (already included: transformers, torch, torchaudio, numpy, scipy, librosa, soundfile)
 RUN pip3 install --no-cache-dir \
     PyPDF2 \
     pdfminer.six \
     nltk \
     tqdm \
     pydub \
-    transformers \
     huggingface_hub \
-    numpy \
-    scipy \
-    librosa \
-    soundfile \
     psutil \
     ebooklib \
     beautifulsoup4
@@ -35,47 +31,42 @@ RUN python3 -c "import nltk; nltk.download('punkt')"
 
 # --- Pre-install silentcipher with modified dependencies ---
 WORKDIR /opt
-# Clone silentcipher
 RUN git clone https://github.com/SesameAILabs/silentcipher.git
 WORKDIR /opt/silentcipher
-# Relax numpy and scipy requirements in silentcipher's setup files
 RUN sed -i "s/numpy>=[0-9.]*/numpy/" setup.py requirements.txt || true
 RUN sed -i "s/scipy>=[0-9.]*/scipy/" setup.py requirements.txt || true
-# Install the modified silentcipher globally
 RUN pip install .
-# --- End of silentcipher pre-installation ---
+# --- End silentcipher ---
 
-# Clone, prepare, and copy Sesame CSM source in one step
+# --- Install CSM dependencies and CSM itself ---
 WORKDIR /opt
-# Note: All commands run relative to /opt unless changed by cd
-RUN git clone https://github.com/SesameAILabs/csm.git && \
-    # --- Verification after clone ---
-    echo "--- Verifying /opt contents after clone ---" && \
-    ls -l /opt && \
-    echo "--- Verifying /opt/csm contents after clone ---" && \
-    ls -l /opt/csm && \
-    # --- End verification ---
-    # Modify files inside /opt/csm
-    cd csm && \
-    sed -i '/^transformers==/d' requirements.txt setup.py && \
-    sed -i '/^moshi==/d' requirements.txt setup.py && \
-    sed -i '/^torchtune==/d' requirements.txt setup.py && \
-    sed -i '/silentcipher @ git/d' setup.py && \
-    # Go back to /opt
-    cd .. && \
-    # Create target directory in site-packages
-    mkdir -p /usr/local/lib/python3.8/dist-packages/csm && \
-    # Copy Python files from /opt/csm into the target directory
-    cp /opt/csm/*.py /usr/local/lib/python3.8/dist-packages/csm/ && \
-    # Create an empty __init__.py to ensure it's treated as a package
-    touch /usr/local/lib/python3.8/dist-packages/csm/__init__.py && \
-    # Verify that the copy happened and list contents
-    echo "--- Verifying CSM copy in site-packages ---" && \
-    ls -l /usr/local/lib/python3.8/dist-packages/csm && \
-    echo "--- Verification complete ---"
+# Install mimi first
+RUN pip install git+https://github.com/SesameAILabs/mimi.git
+# Install other specific CSM dependencies (ignore versions for broader compatibility initially)
+RUN pip install einops rotary_embedding_torch vector_quantize_pytorch xformers accelerate
 
-# Download the model - REMOVED FROM DOCKERFILE
-# RUN python3 -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='sesame/csm-1b')"
+# Clone CSM repo
+RUN git clone https://github.com/SesameAILabs/csm.git
+WORKDIR /opt/csm
+# Remove dependencies we installed manually or are in the base image from setup.py
+RUN sed -i '/^transformers/d' setup.py && \
+    sed -i '/^torch/d' setup.py && \
+    sed -i '/^torchaudio/d' setup.py && \
+    sed -i '/^numpy/d' setup.py && \
+    sed -i '/^scipy/d' setup.py && \
+    sed -i '/^librosa/d' setup.py && \
+    sed -i '/^soundfile/d' setup.py && \
+    sed -i '/^einops/d' setup.py && \
+    sed -i '/^rotary_embedding_torch/d' setup.py && \
+    sed -i '/^vector_quantize_pytorch/d' setup.py && \
+    sed -i '/^xformers/d' setup.py && \
+    sed -i '/^accelerate/d' setup.py && \
+    sed -i '/mimi @ git/d' setup.py && \
+    sed -i '/silentcipher @ git/d' setup.py
+
+# Install CSM in editable mode (adds /opt/csm to path implicitly for the build)
+RUN pip install -e .
+# --- End CSM ---
 
 # Create directories for mounting volumes
 RUN mkdir -p /audiobook_data /books /models

commit a513f9fd0e9dfeb835a144c377a9d1383c241359
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 23:01:25 2025 -0700

    Remove the extraneous text around lines 78-81.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 69754a2..2ca1fa9 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -75,14 +75,7 @@ RUN git clone https://github.com/SesameAILabs/csm.git && \
     echo "--- Verification complete ---"
 
 # Download the model - REMOVED FROM DOCKERFILE
-# RUN python3 -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='sesame/csm-1b')"    # Verify that the copy happened and list contents
-packages ---" && \
-# Create directories for mounting volumeskages/csm && \
-RUN mkdir -p /audiobook_data /books /models    echo "--- Verification complete ---"
-
-# Set working directoryREMOVED FROM DOCKERFILE
-
-WORKDIR /audiobook_data# RUN python3 -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='sesame/csm-1b')"
+# RUN python3 -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='sesame/csm-1b')"
 
 # Create directories for mounting volumes
 RUN mkdir -p /audiobook_data /books /models

commit fe3c29a0bf35e13cc4af8f10c27270e81362a057
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 23:00:14 2025 -0700

    Correct the cp command to copy the Python files from /opt/csm and ensure __init__.py exists.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 80eeb47..69754a2 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -63,15 +63,17 @@ RUN git clone https://github.com/SesameAILabs/csm.git && \
     sed -i '/silentcipher @ git/d' setup.py && \
     # Go back to /opt
     cd .. && \
-    # Copy CSM source directly into site-packages (hardcoded path for python3.8)
-    mkdir -p /usr/local/lib/python3.8/dist-packages && \&& \
-    # Source path is relative to /opt
-    cp -r csm/csm /usr/local/lib/python3.8/dist-packages/csm && \if any, and '*' to copy contents
-    # Verify that the copy happened and list contentse seem present)
-    echo "--- Verifying CSM copy in site-packages ---" && \kages/csm/ && \
-    ls -l /usr/local/lib/python3.8/dist-packages/csm && \'utils', they would be copied like:
-    echo "--- Verification complete ---"    # cp -r /opt/csm/utils /usr/local/lib/python3.8/dist-packages/csm/utils && \
-t exist in the source
+    # Create target directory in site-packages
+    mkdir -p /usr/local/lib/python3.8/dist-packages/csm && \
+    # Copy Python files from /opt/csm into the target directory
+    cp /opt/csm/*.py /usr/local/lib/python3.8/dist-packages/csm/ && \
+    # Create an empty __init__.py to ensure it's treated as a package
+    touch /usr/local/lib/python3.8/dist-packages/csm/__init__.py && \
+    # Verify that the copy happened and list contents
+    echo "--- Verifying CSM copy in site-packages ---" && \
+    ls -l /usr/local/lib/python3.8/dist-packages/csm && \
+    echo "--- Verification complete ---"
+
 # Download the model - REMOVED FROM DOCKERFILE
 # RUN python3 -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='sesame/csm-1b')"    # Verify that the copy happened and list contents
 packages ---" && \

commit fd7627279c3e6944b5a5c5d133630008fa5ea307
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:56:44 2025 -0700

    Adjust paths within the single RUN command.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 1e57de7..80eeb47 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -47,32 +47,40 @@ RUN pip install .
 
 # Clone, prepare, and copy Sesame CSM source in one step
 WORKDIR /opt
+# Note: All commands run relative to /opt unless changed by cd
 RUN git clone https://github.com/SesameAILabs/csm.git && \
+    # --- Verification after clone ---
+    echo "--- Verifying /opt contents after clone ---" && \
+    ls -l /opt && \
+    echo "--- Verifying /opt/csm contents after clone ---" && \
+    ls -l /opt/csm && \
+    # --- End verification ---
+    # Modify files inside /opt/csm
     cd csm && \
-    # Remove specific version requirements causing conflicts
     sed -i '/^transformers==/d' requirements.txt setup.py && \
     sed -i '/^moshi==/d' requirements.txt setup.py && \
     sed -i '/^torchtune==/d' requirements.txt setup.py && \
-    # Remove the silentcipher dependency line entirely from setup.py
     sed -i '/silentcipher @ git/d' setup.py && \
-    # Go back to /opt before copying
+    # Go back to /opt
     cd .. && \
-    # --- Add verification before copy ---
-    echo "--- Verifying /opt contents before copy ---" && \
-    ls -l /opt && \
-    echo "--- Verifying /opt/csm contents before copy ---" && \
-    ls -l /opt/csm && \
-    # --- End verification ---
     # Copy CSM source directly into site-packages (hardcoded path for python3.8)
-    mkdir -p /usr/local/lib/python3.8/dist-packages && \
-    cp -r /opt/csm/csm /usr/local/lib/python3.8/dist-packages/csm && \
-    # Verify that the copy happened and list contents
-    echo "--- Verifying CSM copy in site-packages ---" && \
-    ls -l /usr/local/lib/python3.8/dist-packages/csm && \
-    echo "--- Verification complete ---"
-
+    mkdir -p /usr/local/lib/python3.8/dist-packages && \&& \
+    # Source path is relative to /opt
+    cp -r csm/csm /usr/local/lib/python3.8/dist-packages/csm && \if any, and '*' to copy contents
+    # Verify that the copy happened and list contentse seem present)
+    echo "--- Verifying CSM copy in site-packages ---" && \kages/csm/ && \
+    ls -l /usr/local/lib/python3.8/dist-packages/csm && \'utils', they would be copied like:
+    echo "--- Verification complete ---"    # cp -r /opt/csm/utils /usr/local/lib/python3.8/dist-packages/csm/utils && \
+t exist in the source
 # Download the model - REMOVED FROM DOCKERFILE
-# RUN python3 -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='sesame/csm-1b')"
+# RUN python3 -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='sesame/csm-1b')"    # Verify that the copy happened and list contents
+packages ---" && \
+# Create directories for mounting volumeskages/csm && \
+RUN mkdir -p /audiobook_data /books /models    echo "--- Verification complete ---"
+
+# Set working directoryREMOVED FROM DOCKERFILE
+
+WORKDIR /audiobook_data# RUN python3 -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='sesame/csm-1b')"
 
 # Create directories for mounting volumes
 RUN mkdir -p /audiobook_data /books /models

commit ab1e26b8d5ec5e3f526bc54a747650a7836806d5
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:55:15 2025 -0700

    Add ls commands before the cp command within the single RUN layer.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index d1c601f..1e57de7 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -57,6 +57,12 @@ RUN git clone https://github.com/SesameAILabs/csm.git && \
     sed -i '/silentcipher @ git/d' setup.py && \
     # Go back to /opt before copying
     cd .. && \
+    # --- Add verification before copy ---
+    echo "--- Verifying /opt contents before copy ---" && \
+    ls -l /opt && \
+    echo "--- Verifying /opt/csm contents before copy ---" && \
+    ls -l /opt/csm && \
+    # --- End verification ---
     # Copy CSM source directly into site-packages (hardcoded path for python3.8)
     mkdir -p /usr/local/lib/python3.8/dist-packages && \
     cp -r /opt/csm/csm /usr/local/lib/python3.8/dist-packages/csm && \

commit b7e812f5b2ff0f2bac264bd2a14fbab593182aa1
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:54:15 2025 -0700

    Combine the csm clone, sed, and cp steps into one RUN command.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index c397906..d1c601f 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -45,7 +45,7 @@ RUN sed -i "s/scipy>=[0-9.]*/scipy/" setup.py requirements.txt || true
 RUN pip install .
 # --- End of silentcipher pre-installation ---
 
-# Clone and prepare Sesame CSM source
+# Clone, prepare, and copy Sesame CSM source in one step
 WORKDIR /opt
 RUN git clone https://github.com/SesameAILabs/csm.git && \
     cd csm && \
@@ -54,12 +54,11 @@ RUN git clone https://github.com/SesameAILabs/csm.git && \
     sed -i '/^moshi==/d' requirements.txt setup.py && \
     sed -i '/^torchtune==/d' requirements.txt setup.py && \
     # Remove the silentcipher dependency line entirely from setup.py
-    sed -i '/silentcipher @ git/d' setup.py
-
-# Copy CSM source directly into site-packages
-# Hardcode site-packages path for python3.8
-RUN mkdir -p /usr/local/lib/python3.8/dist-packages && \
-    # Copy the actual 'csm' package directory from the cloned repo
+    sed -i '/silentcipher @ git/d' setup.py && \
+    # Go back to /opt before copying
+    cd .. && \
+    # Copy CSM source directly into site-packages (hardcoded path for python3.8)
+    mkdir -p /usr/local/lib/python3.8/dist-packages && \
     cp -r /opt/csm/csm /usr/local/lib/python3.8/dist-packages/csm && \
     # Verify that the copy happened and list contents
     echo "--- Verifying CSM copy in site-packages ---" && \

commit 16b7c8fef4ff14cd531e3e21dadf6a63cbb3d37d
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:53:18 2025 -0700

    Hardcode the site-packages path in the cp command and add an ls command to verify the contents after copying.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 2dc4a97..c397906 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -57,12 +57,14 @@ RUN git clone https://github.com/SesameAILabs/csm.git && \
     sed -i '/silentcipher @ git/d' setup.py
 
 # Copy CSM source directly into site-packages
-# Determine site-packages path (adjust if base image Python version changes)
-# For python3.8 in the base image:
-ENV SITE_PACKAGES=/usr/local/lib/python3.8/dist-packages
-RUN mkdir -p ${SITE_PACKAGES} && \
+# Hardcode site-packages path for python3.8
+RUN mkdir -p /usr/local/lib/python3.8/dist-packages && \
     # Copy the actual 'csm' package directory from the cloned repo
-    cp -r /opt/csm/csm ${SITE_PACKAGES}/csm
+    cp -r /opt/csm/csm /usr/local/lib/python3.8/dist-packages/csm && \
+    # Verify that the copy happened and list contents
+    echo "--- Verifying CSM copy in site-packages ---" && \
+    ls -l /usr/local/lib/python3.8/dist-packages/csm && \
+    echo "--- Verification complete ---"
 
 # Download the model - REMOVED FROM DOCKERFILE
 # RUN python3 -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='sesame/csm-1b')"

commit b721a098a1a89c1517605528e906e64bb22df8fe
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:51:54 2025 -0700

    Update the notes about the Dockerfile changes in Section 4.4.
    
    Replace pip install -e . for csm with a cp command.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index ccf41a9..2dc4a97 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -45,7 +45,7 @@ RUN sed -i "s/scipy>=[0-9.]*/scipy/" setup.py requirements.txt || true
 RUN pip install .
 # --- End of silentcipher pre-installation ---
 
-# Clone and install Sesame CSM
+# Clone and prepare Sesame CSM source
 WORKDIR /opt
 RUN git clone https://github.com/SesameAILabs/csm.git && \
     cd csm && \
@@ -54,9 +54,18 @@ RUN git clone https://github.com/SesameAILabs/csm.git && \
     sed -i '/^moshi==/d' requirements.txt setup.py && \
     sed -i '/^torchtune==/d' requirements.txt setup.py && \
     # Remove the silentcipher dependency line entirely from setup.py
-    sed -i '/silentcipher @ git/d' setup.py && \
-    # Install csm itself, ignoring its listed dependencies
-    pip install --no-deps -e .
+    sed -i '/silentcipher @ git/d' setup.py
+
+# Copy CSM source directly into site-packages
+# Determine site-packages path (adjust if base image Python version changes)
+# For python3.8 in the base image:
+ENV SITE_PACKAGES=/usr/local/lib/python3.8/dist-packages
+RUN mkdir -p ${SITE_PACKAGES} && \
+    # Copy the actual 'csm' package directory from the cloned repo
+    cp -r /opt/csm/csm ${SITE_PACKAGES}/csm
+
+# Download the model - REMOVED FROM DOCKERFILE
+# RUN python3 -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='sesame/csm-1b')"
 
 # Create directories for mounting volumes
 RUN mkdir -p /audiobook_data /books /models

commit 35f0e5a8eb84f462dec23c55b6dd34e1fa45e6b6
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:35:32 2025 -0700

    Remove the RUN command that downloads the model.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 5869cba..ccf41a9 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -58,11 +58,8 @@ RUN git clone https://github.com/SesameAILabs/csm.git && \
     # Install csm itself, ignoring its listed dependencies
     pip install --no-deps -e .
 
-# Download the model
-RUN python3 -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='sesame/csm-1b')"
-
 # Create directories for mounting volumes
-RUN mkdir -p /audiobook_data /books
+RUN mkdir -p /audiobook_data /books /models
 
 # Set working directory
 WORKDIR /audiobook_data
\ No newline at end of file

commit d086a49a09306de86b7188876c9ed64e2898e781
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:33:21 2025 -0700

    Add the --no-deps flag to the pip install -e . command for csm.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 47b513a..5869cba 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -55,7 +55,8 @@ RUN git clone https://github.com/SesameAILabs/csm.git && \
     sed -i '/^torchtune==/d' requirements.txt setup.py && \
     # Remove the silentcipher dependency line entirely from setup.py
     sed -i '/silentcipher @ git/d' setup.py && \
-    pip install -e .
+    # Install csm itself, ignoring its listed dependencies
+    pip install --no-deps -e .
 
 # Download the model
 RUN python3 -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='sesame/csm-1b')"

commit 1062678186705ef549be0811e3cdb43a3c3b2151
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:31:47 2025 -0700

    Re-add the pip install . step for silentcipher and ensure the csm step deletes the silentcipher line from setup.py.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 91ec773..47b513a 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -33,7 +33,7 @@ RUN pip3 install --no-cache-dir \
 # Download NLTK data
 RUN python3 -c "import nltk; nltk.download('punkt')"
 
-# --- Prepare silentcipher with modified dependencies ---
+# --- Pre-install silentcipher with modified dependencies ---
 WORKDIR /opt
 # Clone silentcipher
 RUN git clone https://github.com/SesameAILabs/silentcipher.git
@@ -41,9 +41,11 @@ WORKDIR /opt/silentcipher
 # Relax numpy and scipy requirements in silentcipher's setup files
 RUN sed -i "s/numpy>=[0-9.]*/numpy/" setup.py requirements.txt || true
 RUN sed -i "s/scipy>=[0-9.]*/scipy/" setup.py requirements.txt || true
-# --- End of silentcipher preparation ---
+# Install the modified silentcipher globally
+RUN pip install .
+# --- End of silentcipher pre-installation ---
 
-# Clone and install Sesame CSM, pointing it to the local silentcipher
+# Clone and install Sesame CSM
 WORKDIR /opt
 RUN git clone https://github.com/SesameAILabs/csm.git && \
     cd csm && \
@@ -51,9 +53,8 @@ RUN git clone https://github.com/SesameAILabs/csm.git && \
     sed -i '/^transformers==/d' requirements.txt setup.py && \
     sed -i '/^moshi==/d' requirements.txt setup.py && \
     sed -i '/^torchtune==/d' requirements.txt setup.py && \
-    # Modify setup.py to use the local silentcipher path
-    # This replaces the git URL with the local file path
-    sed -i "s|silentcipher @ git+https://github.com/SesameAILabs/silentcipher@master|silentcipher @ file:///opt/silentcipher|" setup.py && \
+    # Remove the silentcipher dependency line entirely from setup.py
+    sed -i '/silentcipher @ git/d' setup.py && \
     pip install -e .
 
 # Download the model

commit 91046383b18b8e659ccaea12112f38d6caf76315
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:29:57 2025 -0700

    Adjust the silentcipher pre-installation and the csm installation steps. We won't install silentcipher globally first, but instead modify csm to use the local path.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 2f41bb2..91ec773 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -33,30 +33,27 @@ RUN pip3 install --no-cache-dir \
 # Download NLTK data
 RUN python3 -c "import nltk; nltk.download('punkt')"
 
-# --- Pre-install silentcipher with modified dependencies ---
+# --- Prepare silentcipher with modified dependencies ---
 WORKDIR /opt
 # Clone silentcipher
 RUN git clone https://github.com/SesameAILabs/silentcipher.git
 WORKDIR /opt/silentcipher
 # Relax numpy and scipy requirements in silentcipher's setup files
-# This changes 'numpy>=...' to just 'numpy', 'scipy>=...' to just 'scipy'
 RUN sed -i "s/numpy>=[0-9.]*/numpy/" setup.py requirements.txt || true
 RUN sed -i "s/scipy>=[0-9.]*/scipy/" setup.py requirements.txt || true
-# Install the modified silentcipher
-RUN pip install .
-# --- End of silentcipher pre-installation ---
+# --- End of silentcipher preparation ---
 
-# Clone and install Sesame CSM
+# Clone and install Sesame CSM, pointing it to the local silentcipher
 WORKDIR /opt
 RUN git clone https://github.com/SesameAILabs/csm.git && \
     cd csm && \
     # Remove specific version requirements causing conflicts
-    # Note: Some might be in requirements.txt, others in setup.py
     sed -i '/^transformers==/d' requirements.txt setup.py && \
     sed -i '/^moshi==/d' requirements.txt setup.py && \
     sed -i '/^torchtune==/d' requirements.txt setup.py && \
-    # Attempt to remove silentcipher dep from csm (might be redundant now, but safe)
-    sed -i '/silentcipher @ git/d' setup.py && \
+    # Modify setup.py to use the local silentcipher path
+    # This replaces the git URL with the local file path
+    sed -i "s|silentcipher @ git+https://github.com/SesameAILabs/silentcipher@master|silentcipher @ file:///opt/silentcipher|" setup.py && \
     pip install -e .
 
 # Download the model

commit bedff99fa2b682b026fdbcb553451238c1b4df1a
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:27:38 2025 -0700

    Add another sed command to relax the scipy requirement in silentcipher's setup files.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index fd58593..2f41bb2 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -38,9 +38,10 @@ WORKDIR /opt
 # Clone silentcipher
 RUN git clone https://github.com/SesameAILabs/silentcipher.git
 WORKDIR /opt/silentcipher
-# Relax numpy requirement in silentcipher's setup.py (assuming it's there)
-# This changes 'numpy>=1.25.2' (or similar) to just 'numpy'
+# Relax numpy and scipy requirements in silentcipher's setup files
+# This changes 'numpy>=...' to just 'numpy', 'scipy>=...' to just 'scipy'
 RUN sed -i "s/numpy>=[0-9.]*/numpy/" setup.py requirements.txt || true
+RUN sed -i "s/scipy>=[0-9.]*/scipy/" setup.py requirements.txt || true
 # Install the modified silentcipher
 RUN pip install .
 # --- End of silentcipher pre-installation ---

commit d158d608075fc283e80478f04a660c452063a7df
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:26:25 2025 -0700

    Insert steps to clone silentcipher, modify its numpy requirement, install it, and then proceed with csm.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index d578ce1..fd58593 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -33,6 +33,18 @@ RUN pip3 install --no-cache-dir \
 # Download NLTK data
 RUN python3 -c "import nltk; nltk.download('punkt')"
 
+# --- Pre-install silentcipher with modified dependencies ---
+WORKDIR /opt
+# Clone silentcipher
+RUN git clone https://github.com/SesameAILabs/silentcipher.git
+WORKDIR /opt/silentcipher
+# Relax numpy requirement in silentcipher's setup.py (assuming it's there)
+# This changes 'numpy>=1.25.2' (or similar) to just 'numpy'
+RUN sed -i "s/numpy>=[0-9.]*/numpy/" setup.py requirements.txt || true
+# Install the modified silentcipher
+RUN pip install .
+# --- End of silentcipher pre-installation ---
+
 # Clone and install Sesame CSM
 WORKDIR /opt
 RUN git clone https://github.com/SesameAILabs/csm.git && \
@@ -42,6 +54,7 @@ RUN git clone https://github.com/SesameAILabs/csm.git && \
     sed -i '/^transformers==/d' requirements.txt setup.py && \
     sed -i '/^moshi==/d' requirements.txt setup.py && \
     sed -i '/^torchtune==/d' requirements.txt setup.py && \
+    # Attempt to remove silentcipher dep from csm (might be redundant now, but safe)
     sed -i '/silentcipher @ git/d' setup.py && \
     pip install -e .
 

commit 2d3b52783a5e5365c16ec51c4bf59646f5c8ac2e
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:24:17 2025 -0700

    Modify the RUN command for installing csm to also remove the silentcipher line from setup.py.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index e7a657e..d578ce1 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -38,9 +38,11 @@ WORKDIR /opt
 RUN git clone https://github.com/SesameAILabs/csm.git && \
     cd csm && \
     # Remove specific version requirements causing conflicts
-    sed -i '/^transformers==/d' requirements.txt && \
-    sed -i '/^moshi==/d' requirements.txt && \
-    sed -i '/^torchtune==/d' requirements.txt && \
+    # Note: Some might be in requirements.txt, others in setup.py
+    sed -i '/^transformers==/d' requirements.txt setup.py && \
+    sed -i '/^moshi==/d' requirements.txt setup.py && \
+    sed -i '/^torchtune==/d' requirements.txt setup.py && \
+    sed -i '/silentcipher @ git/d' setup.py && \
     pip install -e .
 
 # Download the model

commit 07ab9cc8a7238e55909c59c829228e20838c9504
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:22:19 2025 -0700

    Add a sed command to remove the torchtune requirement line.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 3ab2652..e7a657e 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -40,6 +40,7 @@ RUN git clone https://github.com/SesameAILabs/csm.git && \
     # Remove specific version requirements causing conflicts
     sed -i '/^transformers==/d' requirements.txt && \
     sed -i '/^moshi==/d' requirements.txt && \
+    sed -i '/^torchtune==/d' requirements.txt && \
     pip install -e .
 
 # Download the model

commit 76584cdfaa7c6aef993f7fb16e3ae3f57136e794
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:20:51 2025 -0700

    update dependencies

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index f841a87..3ab2652 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -37,8 +37,9 @@ RUN python3 -c "import nltk; nltk.download('punkt')"
 WORKDIR /opt
 RUN git clone https://github.com/SesameAILabs/csm.git && \
     cd csm && \
-    # Remove the specific transformers version requirement
+    # Remove specific version requirements causing conflicts
     sed -i '/^transformers==/d' requirements.txt && \
+    sed -i '/^moshi==/d' requirements.txt && \
     pip install -e .
 
 # Download the model

commit c731554f121da288fa72947720e8e8485d24c066
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:18:48 2025 -0700

    Modify the RUN command that installs csm to remove the specific transformers version pin from its requirements before installation.

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index 2d8967c..f841a87 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -37,6 +37,8 @@ RUN python3 -c "import nltk; nltk.download('punkt')"
 WORKDIR /opt
 RUN git clone https://github.com/SesameAILabs/csm.git && \
     cd csm && \
+    # Remove the specific transformers version requirement
+    sed -i '/^transformers==/d' requirements.txt && \
     pip install -e .
 
 # Download the model

commit 21cd7f4eba85d1fcd3b1cb46551f7b9245cf3129
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Sat Apr 12 22:06:18 2025 -0700

    added curl, and rustcargo to dockerfile

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
index d71f594..2d8967c 100644
--- a/docker/sesame-tts/Dockerfile
+++ b/docker/sesame-tts/Dockerfile
@@ -1,13 +1,18 @@
 FROM dustynv/l4t-pytorch:r35.4.1
 
-# Install system dependencies
+# Install system dependencies including curl for rustup
 RUN apt-get update && apt-get install -y \
     ffmpeg \
     libsndfile1 \
     python3-pip \
+    curl \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/*
 
+# Install Rust/Cargo
+ENV PATH="/root/.cargo/bin:${PATH}"
+RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
+
 # Install Python dependencies
 RUN pip3 install --no-cache-dir \
     PyPDF2 \

commit 93e312d5140a567f9eb5786a981584b02de5ef0a
Author: explicitcontextualunderstanding <explicitcontextualunderstaning@gmail.com>
Date:   Fri Apr 11 23:56:49 2025 -0700

    Add dockerfiles

diff --git a/docker/sesame-tts/Dockerfile b/docker/sesame-tts/Dockerfile
new file mode 100644
index 0000000..d71f594
--- /dev/null
+++ b/docker/sesame-tts/Dockerfile
@@ -0,0 +1,44 @@
+FROM dustynv/l4t-pytorch:r35.4.1
+
+# Install system dependencies
+RUN apt-get update && apt-get install -y \
+    ffmpeg \
+    libsndfile1 \
+    python3-pip \
+    && apt-get clean \
+    && rm -rf /var/lib/apt/lists/*
+
+# Install Python dependencies
+RUN pip3 install --no-cache-dir \
+    PyPDF2 \
+    pdfminer.six \
+    nltk \
+    tqdm \
+    pydub \
+    transformers \
+    huggingface_hub \
+    numpy \
+    scipy \
+    librosa \
+    soundfile \
+    psutil \
+    ebooklib \
+    beautifulsoup4
+
+# Download NLTK data
+RUN python3 -c "import nltk; nltk.download('punkt')"
+
+# Clone and install Sesame CSM
+WORKDIR /opt
+RUN git clone https://github.com/SesameAILabs/csm.git && \
+    cd csm && \
+    pip install -e .
+
+# Download the model
+RUN python3 -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='sesame/csm-1b')"
+
+# Create directories for mounting volumes
+RUN mkdir -p /audiobook_data /books
+
+# Set working directory
+WORKDIR /audiobook_data
\ No newline at end of file

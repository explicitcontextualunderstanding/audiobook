#!/bin/bash
# Make this script executable with: chmod +x scripts/fast-build.sh
# Fast build script for Docker images with BuildKit and caching
# Usage: ./scripts/fast-build.sh

set -eo pipefail  # Exit on error, but allow pipes to fail independently

# Ensure we're in the project root directory
cd "$(dirname "$0")/.."
PROJECT_ROOT=$(pwd)

# Enable BuildKit
export DOCKER_BUILDKIT=1

# Colors for prettier output
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Parse command-line arguments
DOCKERFILE="docker/sesame-tts/Dockerfile.fast"
IMAGE_TAG="sesame-tts-jetson:fast"
CACHE_FROM=""
NO_CACHE=false
VERBOSE=false

# Simple argument parsing
for arg in "$@"; do
  case $arg in
    --no-cache)
      NO_CACHE=true
      shift
      ;;
    --verbose)
      VERBOSE=true
      shift
      ;;
    --tag=*)
      IMAGE_TAG="${arg#*=}"
      shift
      ;;
    --dockerfile=*)
      DOCKERFILE="${arg#*=}"
      shift
      ;;
    --cache-from=*)
      CACHE_FROM="${arg#*=}"
      shift
      ;;
    *)
      # Unknown option
      ;;
  esac
done

echo -e "${BLUE}=== Fast Build Script for Audiobook TTS ===${NC}"
echo -e "${BLUE}Using BuildKit and optimized caching${NC}"
echo

# Make sure the .dockerignore file is present
if [ ! -f "$PROJECT_ROOT/.dockerignore.fast" ]; then
    echo -e "${YELLOW}Warning: .dockerignore.fast file not found${NC}"
    echo -e "${YELLOW}Using existing .dockerignore file${NC}"
else
    echo -e "${GREEN}Using fast .dockerignore for faster builds${NC}"
    cp "$PROJECT_ROOT/.dockerignore.fast" "$PROJECT_ROOT/.dockerignore"
fi

# Ensure the optimized Dockerfile exists
if [ ! -f "$PROJECT_ROOT/$DOCKERFILE" ]; then
    echo -e "${RED}Error: Dockerfile not found at $DOCKERFILE${NC}"
    exit 1
fi

# Build arguments
BUILD_ARGS=""

# Add cache-from if specified
if [ -n "$CACHE_FROM" ]; then
    echo -e "${GREEN}Using cache from $CACHE_FROM${NC}"
    BUILD_ARGS="$BUILD_ARGS --cache-from=$CACHE_FROM"
fi

# Add no-cache if specified
if [ "$NO_CACHE" = true ]; then
    echo -e "${YELLOW}Building with --no-cache${NC}"
    BUILD_ARGS="$BUILD_ARGS --no-cache"
fi

# Set verbosity
if [ "$VERBOSE" = true ]; then
    BUILD_ARGS="$BUILD_ARGS --progress=plain"
else
    BUILD_ARGS="$BUILD_ARGS --progress=auto"
fi

# Create build log directory
mkdir -p "$PROJECT_ROOT/build-logs"
LOG_FILE="$PROJECT_ROOT/build-logs/build-$(date '+%Y%m%d-%H%M%S').log"

# Start timer
START_TIME=$(date +%s)

echo -e "${GREEN}Starting optimized build...${NC}"
echo "Dockerfile: $DOCKERFILE"
echo "Image tag: $IMAGE_TAG"
echo "Build arguments: $BUILD_ARGS"
echo "Log file: $LOG_FILE"
echo

# Execute the build with timing
# We use tee to both display output and save to log file
if [ "$VERBOSE" = true ]; then
    # For verbose builds, show all output
    (time docker build $BUILD_ARGS -t "$IMAGE_TAG" -f "$DOCKERFILE" "$PROJECT_ROOT") 2>&1 | tee "$LOG_FILE"
else
    # For normal builds, show a progress indicator
    echo -e "${YELLOW}Build in progress. This may take several minutes...${NC}"
    echo -e "${YELLOW}Full logs are being saved to $LOG_FILE${NC}"
    echo
    
    # Show a spinner while building
    (time docker build $BUILD_ARGS -t "$IMAGE_TAG" -f "$DOCKERFILE" "$PROJECT_ROOT") > "$LOG_FILE" 2>&1 &
    
    # Process ID of the background build
    BUILD_PID=$!
    
    # Spinner characters
    SPINNER=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
    
    # Display spinner until build completes
    i=0
    while kill -0 $BUILD_PID 2>/dev/null; do
        echo -ne "\r${BLUE}${SPINNER[$i]} Building...${NC}"
        i=$(( (i+1) % ${#SPINNER[@]} ))
        sleep 0.2
    done
    
    # Check if build was successful
    wait $BUILD_PID
    BUILD_STATUS=$?
    
    echo -ne "\r"
    
    if [ $BUILD_STATUS -eq 0 ]; then
        echo -e "${GREEN}Build completed successfully!${NC}"
    else
        echo -e "${RED}Build failed with status $BUILD_STATUS${NC}"
        echo -e "${RED}Check log file for details: $LOG_FILE${NC}"
        exit $BUILD_STATUS
    fi
fi

# Calculate build time
END_TIME=$(date +%s)
BUILD_TIME=$((END_TIME - START_TIME))
MINUTES=$((BUILD_TIME / 60))
SECONDS=$((BUILD_TIME % 60))

echo
echo -e "${GREEN}=== Build Summary ===${NC}"
echo -e "Build completed in: ${MINUTES}m ${SECONDS}s"
echo -e "Image: ${YELLOW}$IMAGE_TAG${NC}"
echo -e "Log file: ${YELLOW}$LOG_FILE${NC}"
echo

# Add a reminder about how to run the image
echo -e "${GREEN}=== Next Steps ===${NC}"
echo -e "To run the container:"
echo -e "${YELLOW}docker run --runtime nvidia -it --rm \\
  --name sesame-tts \\
  --volume ~/audiobook_data:/audiobook_data \\
  --volume ~/audiobook:/books \\
  --volume ~/huggingface_models/sesame-csm-1b:/models/sesame-csm-1b \\
  --volume \${HOME}/.cache/huggingface:/root/.cache/huggingface \\
  --workdir /audiobook_data \\
  $IMAGE_TAG${NC}"
echo

# Save the image to cache for future builds (optional)
if [ -z "$CACHE_FROM" ]; then
    echo -e "${BLUE}Tip: For faster future builds, use:${NC}"
    echo -e "${YELLOW}./scripts/fast-build.sh --cache-from=$IMAGE_TAG${NC}"
fi

exit 0
